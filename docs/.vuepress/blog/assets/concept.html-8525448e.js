import{_ as a}from"./framework-c27b6911.js";import{r as e,o,c as p,d as s,e as t,a as r,b as n}from"./app-ec006255.js";const i={},c=n(`<h1 id="概念与知识点" tabindex="-1"><a class="header-anchor" href="#概念与知识点" aria-hidden="true">#</a> 概念与知识点</h1><p>这是一个学习HTTP/TCP相关知识的学习记录, 内容主要摘抄自&lt;&lt;图解HTTP协议&gt;&gt;以及MDN中关于HTTP的相关文档。</p><h2 id="http的诞生" tabindex="-1"><a class="header-anchor" href="#http的诞生" aria-hidden="true">#</a> HTTP的诞生</h2><p>3项WWW构建技术</p><ul><li>把SGML(Standard Generalized Markup Language,标准通用语言)作为页面的文本标记语言的HTML(HyperText Markup Language,超文本标记语言),</li><li>作为文档传递协议的HTTP</li><li>指定文档所在地址的URL(Uniform Resource Locator,统一资源定位符。)</li></ul><h2 id="tcp-ip" tabindex="-1"><a class="header-anchor" href="#tcp-ip" aria-hidden="true">#</a> TCP/IP</h2><p>TCP/IP协议族按层次分别为以下四层: 应用层、传输层、网络层和数据链路层。</p><ul><li>应用层 应用层决定了向用户提供应用服务时通信的活动。(FTP, DNS HTTP)</li><li>传输层 传输层对上层应用层,提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议:TCP/UPD。</li><li>网络层 网络层用于处理在网络上流动的数据包。数据包是网络传输的最小数据单位。</li><li>链路层 用来处理网络的硬件部分。</li></ul><h2 id="tcp三次握手" tabindex="-1"><a class="header-anchor" href="#tcp三次握手" aria-hidden="true">#</a> TCP三次握手</h2><p>TCP协议为了更容易传送大数据才把数据分割。而且TCP协议能够确认数据最终是否送达到对方采用了<strong>三次握手策略(three-way handshaking)</strong>。握手过程中 使用了TCP的标志 ---<em>SYN (synchronize)</em> 和 <em>ACK(acknowledgement)</em>。</p><p>发送端首先发送一个带有SYN标志的数据包给对方。接收端收到后, 回传一个带有SYN/ACK标志的数据包表示传递确认信息。最后发送端再返回一个带ACK标志的数据包, 代表<strong>握手</strong>结束</p><h2 id="http-1-1-标准化的协议" tabindex="-1"><a class="header-anchor" href="#http-1-1-标准化的协议" aria-hidden="true">#</a> HTTP/1.1 标准化的协议</h2><p>HTTP/1.1 消除了大量歧义内容并引入了多项改进:</p><ul><li>连接可以复用，节省了多次打开 TCP 连接加载网页文档资源的时间.在HTTP/1.1中, 所有的连接默认都是持久连接。</li><li>增加管线化技术，允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟。</li><li>引入额外的缓存控制机制</li><li>支持响应分块(chunked: 数据以一系列分块的方式进行发送。)</li><li>引入内容协商机制，包括语言、编码、类型等。并允许客户端和服务器之间约定以最合适的内容进行交换</li><li>凭借 <strong>Host</strong> 标头，能够使不同域名配置在同一个 IP 地址的服务器上</li></ul><h2 id="http-2" tabindex="-1"><a class="header-anchor" href="#http-2" aria-hidden="true">#</a> HTTP/2</h2><ul><li>HTTP/2 是二进制协议而不是文本协议。</li><li>这是一个多路复用协议。并行的请求能在同一个链接中处理, 移除了HTTP/1.x中顺序和阻塞的约束。</li><li>压缩了标头(它将消息分成帧嵌入到流中。数据帧和报头帧分离,这将允许报头压缩)。因为标头在一系列请求中尝尝是相似的,移除了重复和传输重复数据的成本。</li></ul><h2 id="http消息" tabindex="-1"><a class="header-anchor" href="#http消息" aria-hidden="true">#</a> HTTP消息</h2><p>HTTP请求和响应具有相似的结构，由以下部分组成:</p><ul><li>一行起始行用于描述要执行的请求，或者是对应的状态，成功或失败。这个起始行总是单行的。</li><li>一个可选的 HTTP 标头集合指明请求或描述消息主体（body）</li><li>一个空行指示所有关于请求的元数据已经发送完毕</li><li>一个可选的包含请求相关数据的主体（比如 HTML 表单内容），或者响应相关的文档。主体的大小由起始行的 HTTP 头来指定</li></ul><p><img src="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages/httpmsgstructure2.png" alt="HTTP消息"></p><h3 id="http请求" tabindex="-1"><a class="header-anchor" href="#http请求" aria-hidden="true">#</a> HTTP请求</h3><ol><li>起始行(start-line): <strong>一个HTTP方法</strong>、<strong>请求目标</strong>、<strong>HTTP版本</strong></li><li>标头(Header): <strong>通用标头</strong>、<strong>请求标头</strong>、<strong>表示标头</strong></li><li>主体(Body)</li></ol><h3 id="http响应" tabindex="-1"><a class="header-anchor" href="#http响应" aria-hidden="true">#</a> HTTP响应</h3><ol><li>状态行(status line): <strong>协议版本</strong>、<strong>状态码</strong>、<strong>状态文本</strong>。</li><li>标头(Header): <strong>通用标头</strong>、<strong>响应标头</strong>、<strong>表示标头</strong>。</li><li>主体</li></ol><h3 id="内容编码" tabindex="-1"><a class="header-anchor" href="#内容编码" aria-hidden="true">#</a> 内容编码</h3><p>内容编码指明应用在实体内容上的编码格式。并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码 常用的内容编码有以下几种方式:</p><ul><li>gzip (GNU zip)</li><li>compress (UNIX系统的标准压缩)</li><li>deflate (zlib)</li><li>identity (不进行编码)</li></ul><h2 id="http首部字段" tabindex="-1"><a class="header-anchor" href="#http首部字段" aria-hidden="true">#</a> HTTP首部字段</h2><ul><li><p>Accept 告知服务器 客户端 可以处理的内容类型, 这种内容类型用 <strong>MIME类型</strong> 来表示。使用 <strong>Content-Type</strong> 通知客户端它的选择 MIME 类型是一种标准用来表示文档、文件或字节流的性质和格式。type/subtype</p></li><li><p>Date 创建报文的日期</p></li><li><p>Accept-Charset 客户端可以处理的字符集类型。服务端使用 <strong>Content-Type</strong> 通知客户端它的选择。</p></li><li><p>Accept-Encoding 客户端可以处理的内容编码方式 - 通常是某种压缩方法 <strong>Content-Encoding</strong> 中通知客户端该选择.</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (req.url </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/main.js&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">readFileSync</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./main.js&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> gzip </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> zlib.</span><span style="color:#A6E22E;">gzipSync</span><span style="color:#F8F8F2;">(buffer)</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/javascript&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&#39;Content-Encoding&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;gzip&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 告知前端压缩的方式, 前端会将压缩的内容解码</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 压缩后 传输的内容从 5.2k ----&gt; 减少到321B</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(gzip)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Content-Length 实体主体的大小 (对实体主体进行内容编码传输时, 不能再使用Content-Length)首部字段</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (req.url </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/main.js&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">readFileSync</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./main.js&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> gzip </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> zlib.</span><span style="color:#A6E22E;">gzipSync</span><span style="color:#F8F8F2;">(buffer)</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/javascript&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E6DB74;">&#39;Content-Encoding&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;gzip&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E6DB74;">&#39;Content-Length&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// R_CONTENT_LENGTH_MISMATCH 200 (OK) 压缩的时候 使用Content-Length 会报错</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(gzip)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Content-Type 实体媒体类型</li><li>Location 客户端重定向至指定的URI</li><li>Connection 1. 控制不再转发给代理的首部字段 / 2. 管理持久连接</li><li>Transfer-Encoding 报文主体采用的编码方式</li><li>Host 请求头指明了请求将要发送到的服务器主机名和端口号。<strong>Host</strong>首部字段在 <em>HTTP/1.1</em> 规范内是唯一一个必须被包含在请求内的首部字段。</li><li>Referer 当前请求页面的来源页面的地址。referer 实际上是 <strong>referrer</strong> 误拼写。</li><li>Etag 资源的特定版本的标识符。可以将资源以字符串形式做唯一性标识的方式。</li></ul>`,33),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Conditional_requests#%E9%AA%8C%E8%AF%81%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},d=n(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>避免&#39;空中碰撞&#39;。在 <strong>Etag</strong> 和 <strong>If-Match</strong> 头部的帮助下，可以检测到 <strong>空中碰撞</strong> 的编辑冲突。例如, 当编辑 MDN时, 当前的内容 wiki 内容被散列, 并在响应中放入 Etag</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  ETag: </span><span style="color:#E6DB74;">&quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将更改保存到 wiki 页面时, POST 请求将包含有 ETag 值的 <strong>If-Match</strong> 头来检查是否为最新版本。如果哈希值不匹配, 则意味着文档已经被编辑。</p></div><p>HTTP首部字段是可以自动扩展的。在WEB服务器和浏览器的应用上, 会出现各种非标准的首部字段。</p><ul><li>X-Frame-Options 响应首部, 用于控制网站内容在其他Web网站的Frame标签内的显示问题。 <ol><li>DENY 拒绝</li><li>SAMEORIGIN 同源域名下的页面</li></ol></li></ul><h2 id="http状态码" tabindex="-1"><a class="header-anchor" href="#http状态码" aria-hidden="true">#</a> HTTP状态码</h2><p>HTTP响应状态码用来表明 HTTP 请求是否成功完成。响应被归为以下五大类:</p><ol><li>信息响应 (100–199)</li><li>成功响应 (200–299)</li><li>重定向消息 (300–399)</li><li>客户端错误响应 (400–499)</li><li>服务端错误响应 (500–599)</li></ol><ul><li><p>200 <strong>200 OK</strong> 表明请求已经成功。默认情况下状态码为200的响应可以被缓存。</p></li><li><p>204 <strong>No Content</strong> 服务器接受的请求已成功处理。但在返回的响应豹纹中不含实体的主体部分。也不允许返回任何实体的主体。返回204响应, 浏览器显示的页面不发生更新。</p></li><li><p>206 <strong>Partial Content</strong> 客户端进行了范围请求,服务器成功执行了这部分的GET请求。</p></li><li><p>301 <strong>Moved Permanently</strong> 永久性重定向。表示请求的资源已被分配了新的URI.</p></li><li><p>302 <strong>Found</strong> 临时重定向。</p></li><li><p>304 <strong>Not Modified</strong> 可以使用缓存的内容。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;http&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> fs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;fs&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (req.url </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/player&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">301</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E6DB74;">&#39;Location&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;http://localhost:3000&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 定义重定向的地址</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (req.url </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">readFileSync</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./index.html&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;utf-8&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/html&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;app listening at port 3000&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP重定向不是定义重定向的唯一方法, 还有两个:</p><ol><li>借助HTML的 &lt;meta&gt; 元素的HTML重定向机制</li><li>借助 <strong>DOM</strong> 的 JavaScript 重定向机制。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">http-equiv</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;Refresh&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">content</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;0; URL=http://example.com/&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">window.location </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://example.com/&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>400 <strong>Bad Request</strong> 请求报文中存在语法错误。</p></li><li><p>401 <strong>Unauthorized</strong> 缺乏目标资源要求的身份验证凭证</p></li><li><p>403 <strong>Forbidden</strong> 拒绝授权访问</p></li><li><p>404 <strong>Not Found</strong> 服务器无法找到所请求的资源。</p></li><li><p>500 <strong>Internal Server Error</strong> 服务器端在执行请求时发生了错误。</p></li><li><p>503 <strong>Service Unavailable</strong> 它表示服务器尚未处于可以接受请求的状态,通常造成这种情况的原因是由于服务器停机维护或者已超载.</p></li></ul>`,13);function y(u,v){const l=e("ExternalLinkIcon");return o(),p("div",null,[c,s("p",null,[s("a",F,[t("Etag 强检测与弱检测"),r(l)])]),d])}const m=a(i,[["render",y],["__file","concept.html.vue"]]);export{m as default};
