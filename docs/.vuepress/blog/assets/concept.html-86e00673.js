import{_ as s}from"./framework-c27b6911.js";import{o as n,c as l,b as a}from"./app-ec006255.js";const o={},e=a(`<h1 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h1><p>二分查找是计算机科学中最基本,最有用的算法之一。它描述了在有序集合中搜索特定值的过程。</p><ol><li>目标target ----- 需要查找的值</li><li>索引index ----- 查找的当前位置</li><li>左右索引 ----- 用来维持查找空间的指标</li><li>中间指示符 ----- 用来应用条件确定我们应该向左查找还是向右查找的索引.</li></ol><h2 id="模板一" tabindex="-1"><a class="header-anchor" href="#模板一" aria-hidden="true">#</a> 模板一</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">binary_search</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nums.length</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (length </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> end </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (start </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> end) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> left </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">floor</span><span style="color:#F8F8F2;">((right </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> left) </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (nums[mid] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> target) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> mid</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (nums[mid] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> target) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      end </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板一是二分查找最基础和最基本的形式。</p><ul><li>初始条件: <strong>left = 0, right = length - 1</strong></li><li>终止: <strong>left &gt; right</strong></li><li>向左查找: <strong>right = mid - 1</strong></li><li>向右查找: <strong>left = mid + 1</strong></li></ul><h2 id="模板二" tabindex="-1"><a class="header-anchor" href="#模板二" aria-hidden="true">#</a> 模板二</h2><p>模板二十二分查找的高级模板, 它用于需要访问数组中 当前索引及其直接右邻居索引的元素或条件。</p><ul><li>初始条件: <strong>left = 0, right = length</strong></li><li>终止: <strong>left === right</strong></li><li>向左查找: <strong>right = mid</strong></li><li>向右查找: <strong>left = mid + 1</strong></li></ul><h2 id="模板三" tabindex="-1"><a class="header-anchor" href="#模板三" aria-hidden="true">#</a> 模板三</h2><p>用于搜索需要访问当前索引及其在数组中的直接左右邻居索引的元素或条件。</p><ul><li>初始条件 <strong>left = 0, right = length - 1</strong></li><li>终止: <strong>left + 1 === right</strong></li><li>向左查找 <strong>right = mid</strong></li><li>向右查找 <strong>left = mid</strong></li></ul>`,13),p=[e];function t(F,r){return n(),l("div",null,p)}const y=s(o,[["render",t],["__file","concept.html.vue"]]);export{y as default};
