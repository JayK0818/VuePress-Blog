import{_ as s}from"./framework-c27b6911.js";import{o as n,c as a,b as l}from"./app-ec006255.js";const e={},o=l(`<h1 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> Cors</h1><p>跨域资源共享 是一种基于 HTTP 头的机制, 该机制通过允许服务器标示除了它自己以外的其他源(域,协议或端口), 使得浏览器允许这些源访问加载自己的资源。 出于安全性, 浏览器限制脚本内发起的跨源HTTP请求。 跨源资源共享标准新增了一组<strong>HTTP标头</strong>字段,允许服务器声明哪些源站通过浏览器有权访问哪些资源。</p><p><strong>CORS</strong> 请求只能用于 HTTP 或 HTTPS URL方案。</p><h2 id="access-control-allow-origin" tabindex="-1"><a class="header-anchor" href="#access-control-allow-origin" aria-hidden="true">#</a> Access-Control-Allow-Origin</h2><p>允许跨站访问的请求源。但是当响应的附带身份凭证的请求时, 服务端必须明确 <strong>Access-Control-Allow-Origin</strong> 的值 不能使用通配符 * 。</p><p>如果响应包含多个 <strong>Access-Control-Allow-Origin</strong> 标头, 也会发生此错误。确保响应中只有一个这样的标头,并且它只能包含一个单独的源。</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Response to preflight request doesn&#39;t pass access control check: The &#39;Access-Control-Allow-Origin&#39; header contains multiple values &#39;http://192.168.0.141:5600,http://192.168.0.141:5500&#39;, but only one is allowed.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 简单的 server</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;http&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> players </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;durant&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/plain&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(players))</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">XMLHttpRequest</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;GET&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;http://192.168.0.141:3000&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#A6E22E;">onreadystatechange</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (xhr.readyState </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(xhr.response)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Access to XMLHttpRequest at &#39;http://192.168.0.141:3000/&#39; from origin &#39;http://192.168.0.141:5500&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;*&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 以上server 添加 允许所有源访问的表头  则可以成功请求数据。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="access-control-allow-methods" tabindex="-1"><a class="header-anchor" href="#access-control-allow-methods" aria-hidden="true">#</a> Access-Control-Allow-Methods</h2><p>该标头字段指定了访问资源时允许使用的请求方法, 用于预检请求的响应。指明了实际请求所允许使用的HTTP方法。</p><h2 id="access-control-allow-headers" tabindex="-1"><a class="header-anchor" href="#access-control-allow-headers" aria-hidden="true">#</a> Access-Control-Allow-Headers</h2><p>该表头字段用于<strong>预检请求</strong>的响应。指明了实际请求中允许携带的标头字段。这个标头是服务器端对浏览器端 <strong>Access-Control-Request-Headers</strong> 标头的响应。</p><h2 id="预检请求" tabindex="-1"><a class="header-anchor" href="#预检请求" aria-hidden="true">#</a> 预检请求</h2><p>需预检的请求 要求必须首先使用 <strong>OPTIONS</strong> 方法发起一个预检请求到服务器, 以获知服务器是否允许该实际请求。预检请求的使用, 可以避免跨源请求 对服务器的用户数据产生未预期的影响。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">XMLHttpRequest</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#A6E22E;">setRequestHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;X-PINGOTHER&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;pingpong&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在预检请求中,请求字段 <strong>Access-Control-Request-xxx</strong> 标头, 它们仅用于 <strong>OPTIONS</strong> 请求。实际的请求不会携带。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Request-Method&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;POST&#39;</span><span style="color:#F8F8F2;">,      </span><span style="color:#88846F;">// 请求将使用POST方法</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Request-Headers&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;X-PINGOTHER Content-Type&#39;</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 告知服务器 实际请求会携带两个标头字段。</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// server</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;http://192.168.0.141:5500&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 允许访问的源</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;GET,POST,OPTIONS&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 允许访问的请求方法</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;X-PINGOTHER, Content-Type&#39;</span><span style="color:#F8F8F2;">,  </span><span style="color:#88846F;">// 允许请求中携带字段</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Max-Age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">86400</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 预检请求可供缓存的时间长短, 单位为秒。</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="附带身份凭证的请求" tabindex="-1"><a class="header-anchor" href="#附带身份凭证的请求" aria-hidden="true">#</a> 附带身份凭证的请求</h2><p>一般而言, 对于跨源 <strong>XMLHttpRequest</strong> 或 <strong>Fetch</strong> 请求, 浏览器不会发送身份凭证信息。如果需要发送凭证信息, 需要设置 <strong>XMLHttpRequest</strong> 对象的某个特殊标志位。 或在 构造 <strong>Request</strong>对象时设置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// request</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;POST&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;http://192.168.0.141:3000&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.withCredentials </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果请求的时候设置了 <strong>withCredentials</strong> 而服务端未设置 相应的 响应标头, 请求时会报错。</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Access to XMLHttpRequest at &#39;http://192.168.0.141:3000/&#39; from origin &#39;http://192.168.0.141:5500&#39; has been blocked by CORS policy: The value of the &#39;Access-Control-Allow-Credentials&#39; header in the response is &#39;&#39; which must be &#39;true&#39; when the request&#39;s credentials mode is &#39;include&#39;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// server</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Set-Cookie&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;name=kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;http://192.168.0.141:5500&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;GET,POST,OPTIONS&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Credentials&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果服务端设置了 <strong>Access-Control-Allow-Credentials</strong> 而请求未设置 <strong>withCredentials</strong>, 下发的cookie无法写入浏览器, 请求的时候也就无法携带cookie. 只有前后端同时设置了相应的配置, cookie才会正常写入与发送。</p><h2 id="access-control-expose-headers" tabindex="-1"><a class="header-anchor" href="#access-control-expose-headers" aria-hidden="true">#</a> Access-Control-Expose-Headers</h2><p>在跨源访问时, <strong>XMLHttpRequest</strong> 对象的 <strong>getResponseHeader()</strong> 方法只能拿到一些基本的响应头。如果要访问其他头, 则需要服务器设置本响应头。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// server</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Access-Control-Expose-Headers&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Access-Control-Allow-Origin, Access-Control-Allow-Methods&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// request</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(xhr.</span><span style="color:#A6E22E;">getResponseHeaders</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">/**</span></span>
<span class="line"><span style="color:#88846F;">  access-control-allow-methods: GET,POST,OPTIONS</span></span>
<span class="line"><span style="color:#88846F;">  access-control-allow-origin: http://192.168.0.141:5500</span></span>
<span class="line"><span style="color:#88846F;">  content-type: text/plain</span></span>
<span class="line"><span style="color:#88846F;"> * </span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),p=[o];function r(c,t){return n(),a("div",null,p)}const d=s(e,[["render",r],["__file","cors.html.vue"]]);export{d as default};
