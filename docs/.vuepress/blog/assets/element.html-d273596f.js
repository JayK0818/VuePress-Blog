import{_ as F}from"./framework-c27b6911.js";import{r as l,o as d,c as y,a as n,w as t,d as s,e as a,b as e}from"./app-ec006255.js";const v={},m=e(`<h1 id="element" tabindex="-1"><a class="header-anchor" href="#element" aria-hidden="true">#</a> Element</h1><h2 id="element-attributes" tabindex="-1"><a class="header-anchor" href="#element-attributes" aria-hidden="true">#</a> Element.attributes</h2><p>Element.attributes 属性返回该元素所有属性节点的一个实时集合.该集合是一个NamedNodeMap对象。不是Array,没有<strong>Array</strong>的方法。 可以使用 <em>for...of</em>枚举一个元素的所有属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">class</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">data-id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&#39;123&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">style</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&#39;color:red;&#39;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> oDiv </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;.name&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">oDiv.attributes </span><span style="color:#88846F;">// 返回</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  0: class=&#39;name&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  1: id=&#39;hello&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  2: data-id=&#39;123&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  3: style=&#39;color:red;&#39;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">(attribute.attributes)){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;value:&#39;</span><span style="color:#F8F8F2;">, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">value: class=​&quot;name&quot;</span></span>
<span class="line"><span style="color:#88846F;">value: id=​&quot;hello&quot;</span></span>
<span class="line"><span style="color:#88846F;">value: data-id=​&quot;123&quot;</span></span>
<span class="line"><span style="color:#88846F;">value: style=​&quot;color:​red;​&quot;</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [key,value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">(attribute.attributes)){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">0 class=​&quot;name&quot;</span></span>
<span class="line"><span style="color:#88846F;">1 id=​&quot;hello&quot;</span></span>
<span class="line"><span style="color:#88846F;">2 data-id=​&quot;123&quot;</span></span>
<span class="line"><span style="color:#88846F;">3 style=​&quot;color:​red;​&quot;</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),u=e(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>遍历attributes对象,每个attribute也是一个对象, 可以通过attribute.name 和 attribute.value 属性获取属性名和值.</p></div><h2 id="element-children" tabindex="-1"><a class="header-anchor" href="#element-children" aria-hidden="true">#</a> Element.children</h2><p>Element.children 是一个只读属性,返回一个Node的子<em>elements</em>, 是一个动态更新的 HTMLCollection。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nodeReference.children</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> children.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(children[i])</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 对nodeReference进行操作和更新,都会立即更新children的值</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="element-classlist" tabindex="-1"><a class="header-anchor" href="#element-classlist" aria-hidden="true">#</a> Element.classList</h2><p>Element.classList是一个只读属性,返回一个元素<strong>class</strong>属性的动态 DOMTokenList**集合。相比将 <em>element.className</em>作为空格分隔 的字符串来使用, <em>classList</em>是一种更方便的访问元素的类别。</p><ol><li>add()</li><li>remove()</li><li>replace()</li><li>toggle()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">element.classList.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.classList.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(element.classList)</span></span>
<span class="line"><span style="color:#88846F;">// DOMTokenList(2) [&#39;hello&#39;, &#39;world&#39;, value: &#39;hello world&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.classList.</span><span style="color:#A6E22E;">toggle</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;text&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">//因为之前没有text类名</span></span>
<span class="line"><span style="color:#88846F;">// [&#39;hello&#39;, &#39;world&#39;, &#39;text&#39;, value: &#39;hello world text&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.classList.</span><span style="color:#A6E22E;">toggle</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;text&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// DOMTokenList(2) [&#39;hello&#39;, &#39;world&#39;, value: &#39;hello world&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.classList.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 将类名foo 替换为 bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">element.className </span><span style="color:#88846F;">// &#39;hello world&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMTokenList/replace",target:"_blank",rel:"noopener noreferrer"},E=e(`<h2 id="element-hasattribute" tabindex="-1"><a class="header-anchor" href="#element-hasattribute" aria-hidden="true">#</a> Element.hasAttribute()</h2><p>hasAttribute 返回一个布尔值，指示该元素是否包含有指定的属性（attribute）。</p><h2 id="element-clientwidth-element-clientheight" tabindex="-1"><a class="header-anchor" href="#element-clientwidth-element-clientheight" aria-hidden="true">#</a> Element.clientWidth / Element.clientHeight</h2><p>内联元素以及没有CSS样式的元素的clientWidth属性值为0. Element.clientWidth属性表示元素的内部宽度。该属性包括 内边距padding,但不包括边框border,外边距margin和垂直滚动条.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。</p></div><p>Element.clientWidth是一个只读属性。</p><p>如果包含滚动条, clientHeight可以通过CSS height + CSS padding - 水平滚动条的高度来计算。</p><h2 id="element-clientleft-element-clienttop" tabindex="-1"><a class="header-anchor" href="#element-clientleft-element-clienttop" aria-hidden="true">#</a> Element.clientLeft / Element.clientTop</h2><p>Element.clientTop: 一个元素顶部边框的宽度。不包括顶部外边距或内边距。<em>clientTop</em>是只读的。 Element.clientLeft: 表示一个元素的左边框的宽度, <em>clientLeft</em> 不包括左外边距和左内边距。该属性是只读的</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>如果只设置了边框宽度,没有设置边框样式,则返回0</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#A6E22E;">.box</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">border-top-width</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">10</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">border-left-width</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">box.clientLeft  </span><span style="color:#88846F;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">box.clientTop   </span><span style="color:#88846F;">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="element-offsetparent" tabindex="-1"><a class="header-anchor" href="#element-offsetparent" aria-hidden="true">#</a> Element.offsetParent</h2><p>该属性是一个只读属性,返回一个指向最近的(closest,指包含层级上的最近)包含该元素的定位元素。如果没有定位的元素,则 offsetParent为最近的table table cell 或根元素。当元素的display设置为none,offsetParent返回Null。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>在weibkit中,如果元素为隐藏的 或者该元素的style.position被设置为fixed,则该属性返回null</li><li>在IE9中,如果该元素的style.position被设置为fixed,则该属性返回Null,(display:none)无影响。</li></ol></div><h2 id="element-offsetwidth" tabindex="-1"><a class="header-anchor" href="#element-offsetwidth" aria-hidden="true">#</a> Element.offsetWidth</h2><p>HTMLElement.offsetWidth是一个只读属性,返回一个元素的布局宽度。 offsetWidth是测量包含元素的边框(border) 水平线上的内边距(padding) 垂直方向滚动条(scrollbar)(如果存在的话),以及CSS设置的宽度(width)的值。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这个属性将会四舍五入为一个整数, 如果想要获取一个小数值, 可以使用element.getBoundingClientRect()。</p></div>`,16),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetWidth",target:"_blank",rel:"noopener noreferrer"},g=s("h2",{id:"element-scrollheight",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#element-scrollheight","aria-hidden":"true"},"#"),a(" Element.scrollHeight")],-1),f=s("p",null,"Element.scrollHeight 是一个只读属性, 返回一个元素内容高度的度量。包含由于溢出导致的视图中不可见的内容。 (包含元素的padding,但不包含元素的border和margin)。 同样, 该属性也会对值进行取整。",-1),D=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"TIP"),s("p",null,"该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。")],-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollHeight",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#A6E22E;">.box</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">width</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">100</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">height</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">100</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">padding</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">10</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">margin</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">5</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">border</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">5</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">box-sizing</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;">border-box</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">overflow</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;">auto</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">.inner</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">background-color</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">#98c379</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">width</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">400</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">height</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">400</span><span style="color:#F92672;">px</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=s("p",null,"上面是一个div, 里面包含一个更大的div, 可以分别点击 不同按钮 获取它的尺寸数据。",-1),B=s("h3",{id:"判断元素是否滚动到底",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#判断元素是否滚动到底","aria-hidden":"true"},"#"),a(" 判断元素是否滚动到底")],-1),k=s("p",null,"scrollTop是一个非整数, 而scrollHeight 和 clientHeight 是四舍五入的, 因此确认滚动区域是否滚动到底的 唯一方法是查看滚动量是否接近某个阀值。",-1),L=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"TIP"),s("p",null,"在使用显示比例缩放的系统上, scrollTop可能会提供一个小数。")],-1),T=e(`<h2 id="document" tabindex="-1"><a class="header-anchor" href="#document" aria-hidden="true">#</a> Document</h2><ol><li>显式地创建一个元素</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> div </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> comment </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createComment</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;注释&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> text </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;文本&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> fragment </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createDocumentFragment</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>挂载元素</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 1 append 最后一个子元素之后插入节点</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> body </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;body&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">body.</span><span style="color:#A6E22E;">append</span><span style="color:#F8F8F2;">(document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// body的子元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2. before 在节点之前插入元素</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> element </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">document.body.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">before</span><span style="color:#F8F8F2;">(document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;你好,世界&#39;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// text和element同级,text在element前</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 3. prepend 在第一个节点之前插入元素</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">prepend</span><span style="color:#F8F8F2;">(document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;我是前面的元素&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 4. after 在节点之后插入元素</span></span>
<span class="line"><span style="color:#F8F8F2;">element.</span><span style="color:#A6E22E;">after</span><span style="color:#F8F8F2;">(document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 和element同级, text在element后</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 5. element.insertAdjacentHTML(position, string)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> insert </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">document.body.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(insert)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">insert.</span><span style="color:#A6E22E;">insertAdjacentHTML</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;afterbegin&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;&lt;p&gt;after-begin&lt;/p&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">insert.</span><span style="color:#A6E22E;">insertAdjacentHTML</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;afterend&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;&lt;p&gt;after-end&lt;/p&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">insert.</span><span style="color:#A6E22E;">insertAdjacentHTML</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;beforebegin&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;&lt;p&gt;before-begin&lt;/p&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">insert.</span><span style="color:#A6E22E;">insertAdjacentHTML</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;beforeend&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;&lt;p&gt;before-end&lt;/p&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">&lt;p&gt;before-begin&lt;/p&gt;</span></span>
<span class="line"><span style="color:#88846F;">&lt;div&gt;</span></span>
<span class="line"><span style="color:#88846F;">  &lt;p&gt;after-begin&lt;/p&gt;</span></span>
<span class="line"><span style="color:#88846F;">  &lt;p&gt;before-end&lt;/p&gt;</span></span>
<span class="line"><span style="color:#88846F;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#88846F;">&lt;p&gt;after-end&lt;/p&gt;</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 5. element.insertAdjacentText(position, text)</span></span>
<span class="line"><span style="color:#F8F8F2;">insert.</span><span style="color:#A6E22E;">insertAdjacentText</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;afterbegin&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;HELLO&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">insert.</span><span style="color:#A6E22E;">insertAdjacentText</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;beforeend&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;WORLD&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 6. element.insertAdjacentElement(position, element)</span></span>
<span class="line"><span style="color:#F8F8F2;">message.</span><span style="color:#A6E22E;">insertAdjacentElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;beforeend&#39;</span><span style="color:#F8F8F2;">, document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">message.</span><span style="color:#A6E22E;">insertAdjacentElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;beforebegin&#39;</span><span style="color:#F8F8F2;">, document.</span><span style="color:#A6E22E;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 报错,不是一个element</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>删除元素</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 把对象从所属的DOM树中删除</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> message </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">message.textContent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world, 你好世界&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">document.body.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(message)</span></span>
<span class="line"><span style="color:#F8F8F2;">message.</span><span style="color:#A6E22E;">remove</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>outerHTML</li></ol><p>element DOM接口的outerHTML属性获取描述元素的序列化HTML片段。也可以设置为指定字符串解析的节点替换元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> content </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.body.outerHTML</span></span>
<span class="line"><span style="color:#F8F8F2;">element.outerHTML </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;&lt;p&gt;This paragraph replaced the original div.&lt;/p&gt;&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">element不再是文档树的一部分,新段替换了它(不在页面中显示, 但是仍然在内存中)</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mutationobserver" tabindex="-1"><a class="header-anchor" href="#mutationobserver" aria-hidden="true">#</a> MutationObserver</h2><p>MutationObserver接口提供了监视对DOM树所做更改的能力。该功能是DOM3 Events规范的一部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 一个DEMO</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> targetNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;.mutation-container&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> observer_button </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;.mutation-observer-button&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> observer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MutationObserver</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">mutationList</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">observer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// observer是一个微任务</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;我执行了&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mutation </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> mutationList) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mutation:&#39;</span><span style="color:#F8F8F2;">, mutation)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">observer.</span><span style="color:#A6E22E;">observe</span><span style="color:#F8F8F2;">(targetNode, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  attributes: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 属性变化</span></span>
<span class="line"><span style="color:#F8F8F2;">  childList: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,  </span><span style="color:#88846F;">// 子节点变化</span></span>
<span class="line"><span style="color:#F8F8F2;">  subtree: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">     </span><span style="color:#88846F;">// 后代节点变化</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">observer_button.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  targetNode.style.color </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;red&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  targetNode.</span><span style="color:#A6E22E;">setAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data-id&#39;</span><span style="color:#F8F8F2;">, Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">substring</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">  {</span></span>
<span class="line"><span style="color:#88846F;">    attributeName: &#39;style&#39;,</span></span>
<span class="line"><span style="color:#88846F;">    type: &#39;attributes&#39;,</span></span>
<span class="line"><span style="color:#88846F;">    oldValue: &#39;&#39;</span></span>
<span class="line"><span style="color:#88846F;">  }</span></span>
<span class="line"><span style="color:#88846F;">  */</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> element </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;img&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  targetNode.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(element) </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    {</span></span>
<span class="line"><span style="color:#88846F;">      attributeName: null,</span></span>
<span class="line"><span style="color:#88846F;">      type: &#39;childList&#39;</span></span>
<span class="line"><span style="color:#88846F;">    }</span></span>
<span class="line"><span style="color:#88846F;">  */</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MutationObserver的disconnect()方法停止观察对象,可以通过调用observe()方法重用观察者。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">observer.</span><span style="color:#A6E22E;">disconnect</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="&#39;https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver&#39;">MDN-MutationObserver</a></p>`,16);function M(N,j){const c=l("JavaScript-Attribute"),o=l("ClientOnly"),p=l("ExternalLinkIcon"),i=l("JavaScript-BoxSize"),r=l("JavaScript-ScrollBottom");return d(),y("div",null,[m,n(o,null,{default:t(()=>[n(c)]),_:1}),u,s("p",null,[s("a",b,[a("MDN-Element.classList"),n(p)])]),E,s("p",null,[s("a",h,[a("MDN-Element.offsetHeight"),n(p)])]),g,f,D,s("p",null,[s("a",A,[a("MDN-Element.scrollHeight"),n(p)])]),x,n(o,null,{default:t(()=>[n(i)]),_:1}),_,B,k,L,n(o,null,{default:t(()=>[n(r)]),_:1}),T])}const H=F(v,[["render",M],["__file","element.html.vue"]]);export{H as default};
