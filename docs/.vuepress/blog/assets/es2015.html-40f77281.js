import{_ as s}from"./framework-c27b6911.js";import{o as n,c as a,b as l}from"./app-ec006255.js";const p={},e=l(`<h1 id="es2015" tabindex="-1"><a class="header-anchor" href="#es2015" aria-hidden="true">#</a> ES2015</h1><h2 id="for-of循环和iterator" tabindex="-1"><a class="header-anchor" href="#for-of循环和iterator" aria-hidden="true">#</a> for...of循环和iterator</h2><p>遍历器(Iterator)提供了一个统一的,简便的访问接口,为各种不同的数据结构提供了统一的访问机制。任何数据只要部署了 Iterator接口,就可以完成遍历操作。Iterator接口主要供for...of消费。</p><p>原生具备Iterator接口的数据结构</p><ol><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>arguments对象</li><li>NodeList对象</li></ol><p>对象(Object)没有默认部署的Iterator接口,是因为对象的哪个属性先遍历,哪个属性后遍历是不确定的。需要 开发者手动指定。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// array-like对象 调用数组的 Symbol.iterator方法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> iterator </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  length: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]: </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype[Symbol.iterator]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> iterator){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item) </span><span style="color:#88846F;">// a b c</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>普通对象部署数组的遍历器方法没有效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> iterable </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  a: </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  b: </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  c: </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  length: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]: </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype[Symbol.iterator]</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> iterable) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item); </span><span style="color:#88846F;">// undefined, undefined, undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><strong>判断一个数据结构是否具有遍历器方法.</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;2&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;3&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({name:</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">},{name:</span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array_like </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;你好&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  length: </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> string </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> data[Symbol.iterator] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(set)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(map)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(array)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(array_like))  </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(string))  </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">has_iterator</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>给一个普通对象添加遍历器接口,使其能够被for...of遍历</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#E6DB74;">&#39;30&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> _this </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> keys </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> nextId </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nextId </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> keys.length </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          value: _this[keys[nextId</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">]],</span></span>
<span class="line"><span style="color:#F8F8F2;">          done: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          value: </span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          done: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> player){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item) </span><span style="color:#88846F;">// kyrie, irving, 30</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> has_empty_array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#88846F;">// for...of 会遍历空位</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> has_empty_array) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;for...of&#39;</span><span style="color:#F8F8F2;">, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">for...of 1</span></span>
<span class="line"><span style="color:#88846F;">for...of undefined</span></span>
<span class="line"><span style="color:#88846F;">for...of 3</span></span>
<span class="line"><span style="color:#88846F;">for...of undefined</span></span>
<span class="line"><span style="color:#88846F;">for...of 5</span></span>
<span class="line"><span style="color:#88846F;">for...of undefined</span></span>
<span class="line"><span style="color:#88846F;">for...of 7</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generator" tabindex="-1"><a class="header-anchor" href="#generator" aria-hidden="true">#</a> Generator</h2><p>Generator函数会返回一个遍历器对象, 它是一个普通函数, function关键字和函数名之间有一个型号。 函数体内使用yield表达式。定义不同的状态。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">g1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 判断一个函数是否为generator function</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (){}).constructor  </span><span style="color:#88846F;">// [Function: GeneratorFunction]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>generator函数执行后返回的不是函数的运行结果,而是一个包含内部状态的指针对象。(Iterator Object),调用next()方法,指针移向下一个状态。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">helloWorldGenerator</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;ending&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> hw </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">helloWorldGenerator</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(hw.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(hw.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(hw.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{ value: &#39;hello&#39;, done: false }</span></span>
<span class="line"><span style="color:#88846F;">{ value: &#39;world&#39;, done: false }</span></span>
<span class="line"><span style="color:#88846F;">{ value: &#39;ending&#39;, done: true }</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------ 最后没有return的时候 ----------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">player</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;irving&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player_next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">player</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player_next.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player_next.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player_next.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{ value: &#39;kyrie&#39;, done: false }</span></span>
<span class="line"><span style="color:#88846F;">{ value: &#39;irving&#39;, done: false }</span></span>
<span class="line"><span style="color:#88846F;">{ value: undefined, done: true }</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 与for...of的关系</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">obj]) </span><span style="color:#88846F;">// 1 2 3 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// for...of循环可以自动遍历Generator函数运行时生成的Iterator对象。此时不需要调用next方法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">baz</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">baz</span><span style="color:#F8F8F2;">()){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;item---:&#39;</span><span style="color:#F8F8F2;">, item) </span><span style="color:#88846F;">// 1 2 3 4</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// Generator.prototype.return() 终止Generator。</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;生活&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f1</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(s.</span><span style="color:#A6E22E;">return</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;你好生活&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(s.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{ value: &#39;你好生活&#39;, done: true }</span></span>
<span class="line"><span style="color:#88846F;">{ value: undefined, done: true }</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// yield*表达式, 调用另一个Generator函数。</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;生活&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/*你好 hello world 生活*/</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ---------- 使用for...of遍历对象 -------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Entries</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> keys </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> keys) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> [key, obj[key]]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [key, value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Entries</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">30</span></span>
<span class="line"><span style="color:#F8F8F2;">})) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">firstName kyrie</span></span>
<span class="line"><span style="color:#88846F;">lastName irving</span></span>
<span class="line"><span style="color:#88846F;">age 30</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>除了for...of循环以外,扩展运算符(...), 解构赋值和Array.from方法内部调用的都是遍历器接口。它们都可以将Generator函数返回的 Iterator对象作为参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">player_list</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lebron&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;james&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...</span><span style="color:#A6E22E;">player_list</span><span style="color:#F8F8F2;">()])</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">player_list</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [firstName, lastName] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">player_list</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(firstName, lastName)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[ &#39;lebron&#39;, &#39;james&#39; ]</span></span>
<span class="line"><span style="color:#88846F;">[ &#39;lebron&#39;, &#39;james&#39; ]</span></span>
<span class="line"><span style="color:#88846F;">lebron james</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// yield 表达式本身没有返回值, next方法可以传递一个参数, 作为上一个yield表达式的返回值</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">calc</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> (x</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> z </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">yield</span><span style="color:#F8F8F2;"> (y</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> z</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> calc_next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">calc</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(calc_next.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(calc_next.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(calc_next.</span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{ value: 6, done: false }</span></span>
<span class="line"><span style="color:#88846F;">{ value: 8, done: false }</span></span>
<span class="line"><span style="color:#88846F;">{ value: 42, done: true }</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h2><ol><li>Symbol表示独一无二的值,它是JavaScript语言的第七种数据类型。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>消除魔术字符串(在代码之中多次出现与代码形成强耦合的某一个具体的字符串或数值)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getArea</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">shape</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> area </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (shape) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Triangle&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#88846F;">// 魔术字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">      area </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">.5</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> options.width </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> options.height;</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* ... more code ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> area;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">getArea</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Triangle&#39;</span><span style="color:#F8F8F2;">, { width: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, height: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;"> }); </span><span style="color:#88846F;">// 魔术字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 常用的消除魔术字符串的方法就是把它写成一个常量.</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> shapeType </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  triangle: </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;triangle&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getArea</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">shape</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> area </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (shape) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> shapeType.triangle:</span></span>
<span class="line"><span style="color:#F8F8F2;">      area </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">.5</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> options.width </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> options.height;</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> area;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">getArea</span><span style="color:#F8F8F2;">(shapeType.triangle, { width: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, height: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Symbol作为属性名遍历对象的时候,不会被for...in Object.keys() Object.getOwnPropertyNames() JSON.stringify()返回</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;first&#39;</span><span style="color:#F8F8F2;">)]: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;last&#39;</span><span style="color:#F8F8F2;">)]: </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">)]: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  team:</span><span style="color:#E6DB74;">&#39;nets&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> player){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;for--in-key:&#39;</span><span style="color:#F8F8F2;">, key)  </span><span style="color:#88846F;">// team</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(player)){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;for-of-key:&#39;</span><span style="color:#F8F8F2;">, key) </span><span style="color:#88846F;">// team</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">getOwnPropertyNames</span><span style="color:#F8F8F2;">(player) </span><span style="color:#88846F;">// [&#39;team&#39;]</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">getOwnPropertySymbols</span><span style="color:#F8F8F2;">(player); </span></span>
<span class="line"><span style="color:#88846F;">//[Symbol(first),Symbol(last),Symbol(age)]</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(player) </span><span style="color:#88846F;">// {&quot;team&quot;:&quot;nets&quot;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Symbol.for() / Symbol.keyFor()</li></ol><p>Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">Symbol.</span><span style="color:#A6E22E;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> Symbol.</span><span style="color:#A6E22E;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>Symbol.toStringTag</li></ol><p>Symbol.toStringTag 是一个内置symbol,它通常作为对象的属性键使用,对应的属性值应该为字符串类型,通常只有内置的Object.prototype.toString() 方法会读取这个标签并把它包含在自己的返回值里。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>许多内置的JavaScript对象类型即使没有toStringTag属性,也能被toString()方法识别并返回特定的类型。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">)           </span><span style="color:#88846F;">// [object Boolean]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">)           </span><span style="color:#88846F;">// [object String]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)               </span><span style="color:#88846F;">// [object Number]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">])         </span><span style="color:#88846F;">// [object Array]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">({name:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">})  </span><span style="color:#88846F;">// [object Object]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)            </span><span style="color:#88846F;">// [object Null]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">)       </span><span style="color:#88846F;">// [object Undefined]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(){})    </span><span style="color:#88846F;">// [object Function]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">())      </span><span style="color:#88846F;">// [object Date]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------ 引擎为它们设置好了toStringTag标签 ---------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">())       </span><span style="color:#88846F;">// [object Map]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">())       </span><span style="color:#88846F;">// [object Set]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#A6E22E;">m</span><span style="color:#F8F8F2;">(){}) </span><span style="color:#88846F;">// [object GeneratorFunction]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">//-------------------------------------------------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> d1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(d1,Symbol.toStringTag,{</span></span>
<span class="line"><span style="color:#F8F8F2;">  value:</span><span style="color:#E6DB74;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(d1)             </span><span style="color:#88846F;">// [object hello world]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在对webpack打包后的文件分析中,__ webpack_require __.r方法中, 使用了这个属性</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  __webpack_require__.</span><span style="color:#A6E22E;">r</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">exports</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> Symbol </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;undefined&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> Symbol.toStringTag) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 调用 Object.prototype.toString.call(exports) 会返回Module</span></span>
<span class="line"><span style="color:#F8F8F2;">      Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;">, Symbol.toStringTag, { value: </span><span style="color:#E6DB74;">&quot;Module&quot;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 给exports 添加一个 _esModule属性 值为true</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;__esModule&quot;</span><span style="color:#F8F8F2;">, { value: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Symbol.toPrimitive</li></ol><p>Symbol.toPrimitive是一个内置的Symbol值, 它是作为对象的函数值属性存在的, 当一个对象转换为对应的原始值时, 会调用此函数。 一个对象可被转换为原始值时, 该函数被调用时, 会被传递一个字符串参数hint,表示要转换到的原始值的预期类型(number/string/default).</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.toPrimitive](</span><span style="color:#FD971F;font-style:italic;">hint</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(hint </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;number&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(hint </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">player</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player</span><span style="color:#F92672;">+</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)    </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">player)      </span><span style="color:#88846F;">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set和map数据解构" tabindex="-1"><a class="header-anchor" href="#set和map数据解构" aria-hidden="true">#</a> Set和Map数据解构</h2><ol><li>Set数据解构类似与数组,但数据的成员值都是唯一的,没有重复的值。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> s.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(item))  </span><span style="color:#88846F;">// Set {1,2,3,4,5}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">size</span><span style="color:#F8F8F2;">()                            </span><span style="color:#88846F;">// 5</span></span>
<span class="line"><span style="color:#88846F;">// 像set加入值的时候,不会发生类型转换, NaN等于自身。</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(s)                      </span><span style="color:#88846F;">// Set {NaN}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// Set的操作方法和遍历方法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">([</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;durant&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;wade&#39;</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;curry&#39;</span><span style="color:#F8F8F2;">);    </span><span style="color:#88846F;">// Set(5) { &#39;kyrie&#39;, &#39;durant&#39;, &#39;wade&#39;, &#39;james&#39;, &#39;curry&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// Set(4) { &#39;durant&#39;, &#39;wade&#39;, &#39;james&#39;, &#39;curry&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">)     </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 可以将set结构转化为数组</span></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(s)         </span><span style="color:#88846F;">// [ &#39;durant&#39;, &#39;wade&#39;, &#39;james&#39;, &#39;curry&#39; ]</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">()             </span><span style="color:#88846F;">// Set(0) {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 遍历方法:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Set</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">([</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;green&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;blue&#39;</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> set.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// red</span></span>
<span class="line"><span style="color:#88846F;">// green</span></span>
<span class="line"><span style="color:#88846F;">// blue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> set.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// red</span></span>
<span class="line"><span style="color:#88846F;">// green</span></span>
<span class="line"><span style="color:#88846F;">// blue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> set.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(item);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// [&quot;red&quot;, &quot;red&quot;]</span></span>
<span class="line"><span style="color:#88846F;">// [&quot;green&quot;, &quot;green&quot;]</span></span>
<span class="line"><span style="color:#88846F;">// [&quot;blue&quot;, &quot;blue&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Map</li></ol><p>Map数据结构类似于对象,但是键的范围不限于字符串,各种类型的值(包括对象)都可以当作键。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> m1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> o </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {p:</span><span style="color:#E6DB74;">&#39;Hello World!&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">m1.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(o,</span><span style="color:#E6DB74;">&#39;content&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;m1:&#39;</span><span style="color:#F8F8F2;">, m1)  </span><span style="color:#88846F;">// Map(1) { { p: &#39;Hello World!&#39; } =&gt; &#39;content&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(m1.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(o))  </span><span style="color:#88846F;">// content</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(m1.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(o))  </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Map也可以接受一个数组作为参数,该数组的成员是一个个表示键值对的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;张三&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;title&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Author&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#88846F;">//Map(2) { &#39;name&#39; =&gt; &#39;张三&#39;, &#39;title&#39; =&gt; &#39;Author&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  [{firstName:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">}, {lastName:</span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">}],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [{firstName:</span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">}, {lastName:</span><span style="color:#E6DB74;">&#39;james&#39;</span><span style="color:#F8F8F2;">}]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">(array))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">Map(2) {</span></span>
<span class="line"><span style="color:#88846F;">  { firstName: &#39;kyrie&#39; } =&gt; { lastName: &#39;irving&#39; },</span></span>
<span class="line"><span style="color:#88846F;">  { firstName: &#39;lebron&#39; } =&gt; { lastName: &#39;james&#39; }</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 实例的属性和操作方法</span></span>
<span class="line"><span style="color:#F8F8F2;">size</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Map</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key,value)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Map</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key)  </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Map</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Map</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> m5 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> o1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {firstName:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,lastName:</span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> o2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {firstName:</span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,lastName:</span><span style="color:#E6DB74;">&#39;james&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(o1,o2)</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">262</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;standard&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;year&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2021</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">/*m5: Map(3) {</span></span>
<span class="line"><span style="color:#88846F;">{firstName:&#39;kyrie&#39;,lastName:&#39;irving&#39;}</span></span>
<span class="line"><span style="color:#88846F;">=&gt; {firstName:&#39;lebron&#39;,lastName:&#39;james&#39;}</span></span>
<span class="line"><span style="color:#88846F;">262 =&gt; &#39;standard&#39;,</span></span>
<span class="line"><span style="color:#88846F;">&#39;year&#39; =&gt; 2021</span></span>
<span class="line"><span style="color:#88846F;">}*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">m5.size               </span><span style="color:#88846F;">// 3</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(o1)            </span><span style="color:#88846F;">// { firstName: &#39;lebron&#39;, lastName: &#39;james&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(o1)            </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(o1)         </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">m5                    </span><span style="color:#88846F;">// Map(2) { 262 =&gt; &#39;standard&#39;, &#39;year&#39; =&gt; 2021 }</span></span>
<span class="line"><span style="color:#F8F8F2;">m5.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">m5                    </span><span style="color:#88846F;">// Map(0) {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Map.prototype.keys()</li><li>Map.prototype.values()</li><li>Map.prototype.entries()</li><li>Map.prototype.forEach()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;T&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;yes&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> map.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key:&#39;</span><span style="color:#F8F8F2;">, key)       </span><span style="color:#88846F;">// F  T</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> map.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;value:&#39;</span><span style="color:#F8F8F2;">, value)  </span><span style="color:#88846F;">// foo yes</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [key,value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> map.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key,value)        </span><span style="color:#88846F;">// F foo  T yes</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数值的扩展" tabindex="-1"><a class="header-anchor" href="#数值的扩展" aria-hidden="true">#</a> 数值的扩展</h2><h4 id="number-isfinite-number-isnan" tabindex="-1"><a class="header-anchor" href="#number-isfinite-number-isnan" aria-hidden="true">#</a> Number.isFinite() Number.isNaN()</h4><p>Number.isFinite() 分别判断一个数值是否为有限的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Number.isNaN() 用来检测一个值是否为NaN</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;13&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;true&#39;</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>Number.isFinite() 如果参数类型不是数值,isFinite()一律返回false</li><li>Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。</li></ol></div><p>与传统的全局方法isFinite() 和 isNaN()的区别在于 传统方法先调用Number() 将非数值转化为数值,再进行判断。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;13&#39;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">isFinite</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;13&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;NaN&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Number.</span><span style="color:#A6E22E;">isNaN</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;NaN&#39;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="number-parsefloat-和-number-parseint" tabindex="-1"><a class="header-anchor" href="#number-parsefloat-和-number-parseint" aria-hidden="true">#</a> Number.parseFloat() 和 Number.parseInt()</h3><p>ES6 将全局方法 parseInt() 和 parseFloat()移植到Number对象上面,行为保持不变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// ES5的写法</span></span>
<span class="line"><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;12.34&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 12</span></span>
<span class="line"><span style="color:#A6E22E;">parseFloat</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123.45#&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 123.45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ES6的写法</span></span>
<span class="line"><span style="color:#F8F8F2;">Number.</span><span style="color:#A6E22E;">parseFloat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// Infinity</span></span>
<span class="line"><span style="color:#F8F8F2;">Number.</span><span style="color:#A6E22E;">parseFloat</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// -Infinity</span></span>
<span class="line"><span style="color:#F8F8F2;">Number.</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// NaN</span></span>
<span class="line"><span style="color:#F8F8F2;">Number.</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// NaN</span></span>
<span class="line"><span style="color:#F8F8F2;">Number.</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;12.34&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 12</span></span>
<span class="line"><span style="color:#F8F8F2;">Number.</span><span style="color:#A6E22E;">parseFloat</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123.45#&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 123.45</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Number.parseInt 和 Number.parseFloat 对 Infinity -Infinity的处理结果不同</p><h2 id="数组的扩展" tabindex="-1"><a class="header-anchor" href="#数组的扩展" aria-hidden="true">#</a> 数组的扩展</h2><h3 id="扩展运算符" tabindex="-1"><a class="header-anchor" href="#扩展运算符" aria-hidden="true">#</a> 扩展运算符</h3><p>扩展运算符(...) 将一个数组转为用都好分隔的参数序列。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// 1 2 3</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">],</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// [1,2,3,4,5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">items</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  array.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">items)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------ 应用 --------</span></span>
<span class="line"><span style="color:#88846F;">// 1. 合并数组</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], arr2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">arr1, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">arr2]  </span><span style="color:#88846F;">// [1,2,3,4,5,6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2. 与解构赋值结合</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">rest] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> array</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(rest) </span><span style="color:#88846F;">// [2,3,4,5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 3. 字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;">// [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 4. 实现了Iterator接口的对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> nodeList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelectorAll</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;div&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">nodeList]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 扩展运算符会将空位转为undefined</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> has_empty_array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">has_empty_array])</span></span>
<span class="line"><span style="color:#88846F;">// [ 1, undefined, 3, undefined, 5, undefined, 7 ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> Array.from()</h3><ol><li>Array.from() 方法用于将两类对象转为真正的数组:类似数组的对象(array-like) 和可遍历(iterable)的对象。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> arrayLike </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">:</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">:</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  length:</span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(arrayLike))  </span><span style="color:#88846F;">// [a, b, c]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">({length:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">})  </span><span style="color:#88846F;">// [undefined,undefined,undefined]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>任何有length属性的对象,都可以通过Array.from方法转为数组。</p></div><ol start="2"><li>Array.from() 还可以接受第二个参数,作用类似于数组的map方法,用来对每个元素进行处理,将处理后的值放入返回的数组</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">({length:</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">},() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">//  [</span></span>
<span class="line"><span style="color:#88846F;">//   0.9914679755190499,</span></span>
<span class="line"><span style="color:#88846F;">//   0.6476812277611301,</span></span>
<span class="line"><span style="color:#88846F;">//   0.7714291351785123,</span></span>
<span class="line"><span style="color:#88846F;">//   0.08156054668342261,</span></span>
<span class="line"><span style="color:#88846F;">//   0.4137601519196352,</span></span>
<span class="line"><span style="color:#88846F;">//   0.5975863812315991,</span></span>
<span class="line"><span style="color:#88846F;">//   0.7500119437899317,</span></span>
<span class="line"><span style="color:#88846F;">//   0.9440579010811851,</span></span>
<span class="line"><span style="color:#88846F;">//   0.5190184961310442,</span></span>
<span class="line"><span style="color:#88846F;">//   0.40094030827389204</span></span>
<span class="line"><span style="color:#88846F;">// ]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Array.from会将数组的空位转为undefined。</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> has_empty_array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(has_empty_array, (</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item))</span></span>
<span class="line"><span style="color:#88846F;">// [ 1, undefined, 3, undefined, 5, undefined, 7 ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-of" tabindex="-1"><a class="header-anchor" href="#array-of" aria-hidden="true">#</a> Array.of()</h3><p>Array.of()用于将一组值,转换为数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">of</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// [3,11,8]</span></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">of</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// [3]</span></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#A6E22E;">of</span><span style="color:#F8F8F2;">()  </span><span style="color:#88846F;">// []</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find-findindex" tabindex="-1"><a class="header-anchor" href="#find-findindex" aria-hidden="true">#</a> find()/findIndex()</h3><p>找到数组中第一个符合条件的数组成员/成员序号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// 4</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// 10</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">findIndex</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 1</span></span>
<span class="line"><span style="color:#88846F;">// find和findIndex弥补了indexOf()方法的不足,可以发现NaN.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entries-keys-values" tabindex="-1"><a class="header-anchor" href="#entries-keys-values" aria-hidden="true">#</a> entries()/keys()/values()</h3><p>ES6新增了三个新方法 - entries()/keys()/values(),用于遍历数组,它们都返回一个遍历器对象。可用for...of循环遍历。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key)  </span><span style="color:#88846F;">// 0 1 2</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(value)  </span><span style="color:#88846F;">// a b c</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [key,value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">  0 a</span></span>
<span class="line"><span style="color:#88846F;">  1 b</span></span>
<span class="line"><span style="color:#88846F;">  2 c</span></span>
<span class="line"><span style="color:#88846F;">  */</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组的空位" tabindex="-1"><a class="header-anchor" href="#数组的空位" aria-hidden="true">#</a> 数组的空位</h3><p>数组的空位指的是 数组的某个位置没有任何值。</p><ol><li>forEach(), filter(), reduce(), every(), some()都会跳过空位, map()会跳过空位,但是保留这个值。</li><li>join()和toString()会将空位视为undefined,而undefined和null会被处理为空字符串。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> has_empty_array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, , </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(has_empty_array)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;forEach&#39;</span><span style="color:#F8F8F2;">, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    forEach 1</span></span>
<span class="line"><span style="color:#88846F;">    forEach 3</span></span>
<span class="line"><span style="color:#88846F;">    forEach 5</span></span>
<span class="line"><span style="color:#88846F;">    forEach 7</span></span>
<span class="line"><span style="color:#88846F;">  */</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">filter</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;filter&#39;</span><span style="color:#F8F8F2;">, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> item</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">filter 1</span></span>
<span class="line"><span style="color:#88846F;">filter 3</span></span>
<span class="line"><span style="color:#88846F;">filter 5</span></span>
<span class="line"><span style="color:#88846F;">filter 7</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">prev</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;reduce:&#39;</span><span style="color:#F8F8F2;">, prev, next)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prev </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> next</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">reduce: 0 1</span></span>
<span class="line"><span style="color:#88846F;">reduce: 1 3</span></span>
<span class="line"><span style="color:#88846F;">reduce: 4 5</span></span>
<span class="line"><span style="color:#88846F;">reduce: 9 7</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">every</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;every&#39;</span><span style="color:#F8F8F2;">, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> item</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">every 1</span></span>
<span class="line"><span style="color:#88846F;">every 3</span></span>
<span class="line"><span style="color:#88846F;">every 5</span></span>
<span class="line"><span style="color:#88846F;">every 7</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">some</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;some&#39;</span><span style="color:#F8F8F2;">, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> item</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(has_empty_array.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;map&#39;</span><span style="color:#F8F8F2;">, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> item</span></span>
<span class="line"><span style="color:#F8F8F2;">}))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">map 1</span></span>
<span class="line"><span style="color:#88846F;">map 3</span></span>
<span class="line"><span style="color:#88846F;">map 5</span></span>
<span class="line"><span style="color:#88846F;">map 7</span></span>
<span class="line"><span style="color:#88846F;">[ 1, &lt;1 empty item&gt;, 3, &lt;1 empty item&gt;, 5, &lt;1 empty item&gt;, 7 ]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(has_empty_array.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">(), has_empty_array.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">// 1,,3,,5,,7</span></span>
<span class="line"><span style="color:#88846F;">// 1,,3,,5,,7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6明确的将空位处理为undefined. entries() / values() / keys() / find() / findIndex() 会将空位处理成undefined</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">()])</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[</span></span>
<span class="line"><span style="color:#88846F;">  [ 0, 1 ],</span></span>
<span class="line"><span style="color:#88846F;">  [ 1, undefined ],</span></span>
<span class="line"><span style="color:#88846F;">  [ 2, 3 ],</span></span>
<span class="line"><span style="color:#88846F;">  [ 3, undefined ],</span></span>
<span class="line"><span style="color:#88846F;">  [ 4, 5 ],</span></span>
<span class="line"><span style="color:#88846F;">  [ 5, undefined ],</span></span>
<span class="line"><span style="color:#88846F;">  [ 6, 7 ]</span></span>
<span class="line"><span style="color:#88846F;">]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()])</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[</span></span>
<span class="line"><span style="color:#88846F;">  0, 1, 2, 3,</span></span>
<span class="line"><span style="color:#88846F;">  4, 5, 6</span></span>
<span class="line"><span style="color:#88846F;">]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">has_empty_array.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()])</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[ 1, undefined, 3, undefined, 5, undefined, 7 ]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([,</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([,</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">findIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(has_empty_array.</span><span style="color:#A6E22E;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(has_empty_array.</span><span style="color:#A6E22E;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">))   </span><span style="color:#88846F;">// -1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的扩展" tabindex="-1"><a class="header-anchor" href="#函数的扩展" aria-hidden="true">#</a> 函数的扩展</h2><ol><li>函数参数默认值与对象的解构赋值结合</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 设置了解构赋值的默认值,函数参数默认值是控对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">({</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([x,y])</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 没有设置解构赋值的默认值,默认值不是空对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">({</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {x:</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,y:</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">}){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">([x,y])</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">()  </span><span style="color:#88846F;">// 0  0</span></span>
<span class="line"><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">()  </span><span style="color:#88846F;">// 0  0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">({x:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,y:</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// 3  8</span></span>
<span class="line"><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">({x:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,y:</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// 3  8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">({x:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// 3  0</span></span>
<span class="line"><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">({x:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// 3  undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">({})   </span><span style="color:#88846F;">// 0 0</span></span>
<span class="line"><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">({})   </span><span style="color:#88846F;">// undefined undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">m1</span><span style="color:#F8F8F2;">({z:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// 0 0</span></span>
<span class="line"><span style="color:#A6E22E;">m2</span><span style="color:#F8F8F2;">({z:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// undefined undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>函数的length</li></ol><p>返回没有指定默认值的参数个数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">){}).length </span><span style="color:#88846F;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">){}).length </span><span style="color:#88846F;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">){}).length </span><span style="color:#88846F;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">){}).length </span><span style="color:#88846F;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F8F8F2;">){}).length </span><span style="color:#88846F;">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果设置了默认值的参数不是尾参数,那么length属性也不再计入后面的参数</p></div><ol start="3"><li>rest参数</li></ol><p>rest参数搭配的是一个数组,而arguments对象是一个伪数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">sum</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// Array.isArray(args)  // true</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> args.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">prev</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> prev </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> next, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">sum</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>rest参数之后不能再有其他参数,否则会报错。 并且函数的length属性,不包括rest参数</p></div><ol start="4"><li>箭头函数的this</li></ol><p>对于普通函数,内部的this指向函数运行时所在的对象,但是在箭头函数,它没有自己的this对象,内部的this就是定义时上层作用域 中的this.(箭头函数内部的this指向是固定的.而普通函数的this指向是可变的。)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">21</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.id)  </span><span style="color:#88846F;">// 42</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.id)  </span><span style="color:#88846F;">// 21</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">foo.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">({id:</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>箭头函数没有自己的this,也就不能使用call() apply()和bind()方法改变this的指向。</li><li>同样arguments super 和new.target在箭头函数中也是不存在的。</li><li>不可以使用yield命令, 因此箭头函数不能用作Generator函数。</li></ol></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;args&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// [1,2,3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>作用域</li></ol><p>一旦设置了参数的默认值, 函数进行声明初始化时, 参数会形成一个单独的作用域。等到初始化结束时,这个作用域就会消失。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(y)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(y)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>function.name</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(f.name) </span><span style="color:#88846F;">// f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">baz</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">bar</span><span style="color:#F8F8F2;">(){}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(baz.name) </span><span style="color:#88846F;">// bar</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> Function).name </span><span style="color:#88846F;">// &#39;anonymous&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(){}</span></span>
<span class="line"><span style="color:#F8F8F2;">foo.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">({}).name   </span><span style="color:#88846F;">// bound foo</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的扩展" tabindex="-1"><a class="header-anchor" href="#对象的扩展" aria-hidden="true">#</a> 对象的扩展</h2><ol><li>允许直接写入变量和函数作为对象的属性和方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    x,</span></span>
<span class="line"><span style="color:#F8F8F2;">    y</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// ---- 等同于 -----</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    x: x,</span></span>
<span class="line"><span style="color:#F8F8F2;">    y: y</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ---- 方法也可以简写</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">method</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>属性名表达式</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;bc&#39;</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">123</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> lastWord </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;last word&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;first word&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [lastWord]: </span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">](){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Object.is()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">({},{})    </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)    </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">is</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 模拟一个Object.is 方法</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(Object, </span><span style="color:#E6DB74;">&#39;is&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">value</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> y) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> y</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> y</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  writable: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Object.assign()</li></ol><p>用于将源对象的所有可枚举属性复制到目标对象。 如果目标对象与源对象有同名属性, 则后面的属性会覆盖前面的属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> source1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, c: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> source2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {c: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">(target, source1, source2)</span></span>
<span class="line"><span style="color:#88846F;">// {a: 1, b: 2, c: 3}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Object.assign()复制的属性是有限制的, 只能复制源对象自身的属性(不复制继承属性),也不复制不可枚举属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">){</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Player</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">skill</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(){console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;crossover&#39;</span><span style="color:#F8F8F2;">)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> kyrie </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">kyrie.</span><span style="color:#A6E22E;">skill</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// crossover</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">({}, kyrie)</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">skill</span><span style="color:#F8F8F2;">()     </span><span style="color:#88846F;">// a.skill is not a function</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">({b: </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">}, </span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">({}, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    value: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    enumerable: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// {b: &#39;c&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ol start="5"><li>Object.getOwnPropertyDescriptor</li></ol><p>对象的每个属性都有一个描述对象,该方法可以获取对象属性的描述对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {foo: </span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">getOwnPropertyDescriptor</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">configurable: true</span></span>
<span class="line"><span style="color:#88846F;">enumerable: true</span></span>
<span class="line"><span style="color:#88846F;">value: 123</span></span>
<span class="line"><span style="color:#88846F;">writable: true</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6规定, 所有Class的原型方法都是不可枚举的</p><ol start="6"><li>属性的遍历</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// for...in</span></span>
<span class="line"><span style="color:#88846F;">// 循环遍历对象自身的属性和继承的可枚举属性.</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">firstName</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">lastName</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.firstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> firstName</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.lastName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lastName</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">[</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;fullName&#39;</span><span style="color:#F8F8F2;">)] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.firstName </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.lastName</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Player</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">say</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.firstName </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;-&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.lastName)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(player, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> player){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;key&#39;</span><span style="color:#F8F8F2;">, key, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">, player[key])</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">key firstName value kyrie</span></span>
<span class="line"><span style="color:#88846F;">key lastName value irving</span></span>
<span class="line"><span style="color:#88846F;">key say value ƒ () {</span></span>
<span class="line"><span style="color:#88846F;">  console.log(this.firstName + &#39;-&#39; + this.lastName)</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Object.keys()  返回一个数组,包含对象自身的所有可枚举属性</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(player))</span></span>
<span class="line"><span style="color:#88846F;">// [&#39;firstName&#39;, &#39;lastName&#39;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Object.getOwnPropertyNames(obj)</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个数组,包含对象自身所有属性(不包含symbol, 但是包含不可枚举属性</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getOwnPropertyNames</span><span style="color:#F8F8F2;">(player))</span></span>
<span class="line"><span style="color:#88846F;">// [&#39;firstName&#39;, &#39;lastName&#39;, &#39;age&#39;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Object.getOwnPropertySymbols(obj)</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个数组, 包含对象自身所有symbol属性</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getOwnPropertySymbols</span><span style="color:#F8F8F2;">(player))</span></span>
<span class="line"><span style="color:#88846F;">// [Symbol(fullName)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Reflect.ownKeys()</span></span>
<span class="line"><span style="color:#88846F;">// 返回一个数组, 包含对象自身的所有属性,不管属性名是symbol 还是字符串,无论是否可枚举。</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Reflect.</span><span style="color:#A6E22E;">ownKeys</span><span style="color:#F8F8F2;">(player))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>Object.setPrototypeOf()/Object.getPrototypeOf()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">setPrototypeOf</span><span style="color:#F8F8F2;">(a, b)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">())  </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(a) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> b) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串的扩展" tabindex="-1"><a class="header-anchor" href="#字符串的扩展" aria-hidden="true">#</a> 字符串的扩展</h2><h3 id="字符串的遍历器接口" tabindex="-1"><a class="header-anchor" href="#字符串的遍历器接口" aria-hidden="true">#</a> 字符串的遍历器接口</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(s)  </span><span style="color:#88846F;">// &#39;h&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="codepointat-返回一个字符的码点" tabindex="-1"><a class="header-anchor" href="#codepointat-返回一个字符的码点" aria-hidden="true">#</a> codePointAt() 返回一个字符的码点</h3><p>该方法能够正确处理4个字节存储的字符, 返回一个字符的码点。</p><h3 id="string-fromcharcode" tabindex="-1"><a class="header-anchor" href="#string-fromcharcode" aria-hidden="true">#</a> String.fromCharCode()</h3><p>该方法用于Unicode码点返回对应字符串。</p><h3 id="includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#includes-startswith-endswith" aria-hidden="true">#</a> includes()/startsWith()/endsWith()</h3><p>includes() 表示是否找到了匹配点字符串 startsWith() 表示字符串是否在原字符串的头部 endsWith() 表示字符串是否在原字符串的尾部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Hello world!&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">startsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">endsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;!&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">s.</span><span style="color:#A6E22E;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat" aria-hidden="true">#</a> repeat()</h3><p>repeat方法返回一个新字符串, 表示将原字符串重复n次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#E6DB74;">&#39;x&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">repeat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">repeat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// &quot;hellohello&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;na&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">repeat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// &quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h2><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">(target, handler)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h3><p>拦截对象属性的读取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName:</span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age:</span><span style="color:#AE81FF;">30</span></span>
<span class="line"><span style="color:#F8F8F2;">}, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">prop</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">receiver</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(prop </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">18</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> target[prop]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player.age) </span><span style="color:#88846F;">// 18</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player.firstName) </span><span style="color:#88846F;">// kyrie</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ---------- get方法可以继承 ---------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> proto </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">({}, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">prop</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;get&#39;</span><span style="color:#F8F8F2;">, prop)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> target[prop]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(proto)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(obj.foo)  </span><span style="color:#88846F;">// get foo</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><p>set方法用于拦截某个属性的赋值操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> monster </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  eyeCount: </span><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> monster_proxy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">(monster, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">prop</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(prop </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;eyeCount&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> (value</span><span style="color:#F92672;">%</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)){</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Monsters must have an even number of eyes&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">      obj[prop] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// monster_proxy.eyeCount = 1  // 无法设置, 必须为偶数</span></span>
<span class="line"><span style="color:#F8F8F2;">monster_proxy.eyeCount </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(monster_proxy.eyeCount) </span><span style="color:#88846F;">// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apply" tabindex="-1"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply</h3><p>apply方法拦截函数的调用 , call 和 apply操作, 接受三个参数, 分别是目标对象, 目标对象的上下文对象 以及 目标对象的参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">sum</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> c</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> proxyDoubleSum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">(sum, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// target sum</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// context {times:2}</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// args [1,2,3]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">context</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">target</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">args) </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> context.times</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">sum</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 6</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(proxyDoubleSum.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">({times: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="has" tabindex="-1"><a class="header-anchor" href="#has" aria-hidden="true">#</a> has</h3><p>has方法用来拦截判断对象是否具有某个属性时生效。典型的操作就是in运算符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  _prop: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  prop: </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(key.</span><span style="color:#A6E22E;">startsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;_&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;_prop&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> proxy) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#88846F;">// has 拦截对 for ... in 遍历不生效。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deleteproperty" tabindex="-1"><a class="header-anchor" href="#deleteproperty" aria-hidden="true">#</a> deleteProperty</h3><p>deleteProperty方法用于拦截delete操作,如果抛出错误或者返回false,当前属性就无法被delete删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Proxy</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  _prop: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  prop: </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">deleteProperty</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(key.</span><span style="color:#A6E22E;">startsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;_&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#A6E22E;">deleteProperty</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;start:&#39;</span><span style="color:#F8F8F2;">, proxy)  </span><span style="color:#88846F;">// { _prop: &#39;hello&#39;, prop: &#39;world&#39; }</span></span>
<span class="line"><span style="color:#F92672;">delete</span><span style="color:#F8F8F2;"> proxy._prop</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(proxy)  </span><span style="color:#88846F;">// { _prop: &#39;hello&#39;, prop: &#39;world&#39; }</span></span>
<span class="line"><span style="color:#F92672;">delete</span><span style="color:#F8F8F2;"> proxy.prop</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(proxy)  </span><span style="color:#88846F;">//  { _prop: &#39;hello&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,168),o=[e];function F(c,r){return n(),a("div",null,o)}const y=s(p,[["render",F],["__file","es2015.html.vue"]]);export{y as default};
