import{_ as e}from"./framework-c27b6911.js";import{r as l,o,c as p,d as s,e as r,a as i,b as n}from"./app-ec006255.js";const c={},t=n(`<h1 id="es2019" tabindex="-1"><a class="header-anchor" href="#es2019" aria-hidden="true">#</a> ES2019</h1><h2 id="trimstart-trimend" tabindex="-1"><a class="header-anchor" href="#trimstart-trimend" aria-hidden="true">#</a> trimStart / trimEnd</h2><p>对字符串新增了 trimStart() 和 trimEnd() 方法，分别用于取消字符串头部与尾部对空格。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;abc     &#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;      abc&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(s2.</span><span style="color:#A6E22E;">trimStart</span><span style="color:#F8F8F2;">()) </span><span style="color:#88846F;">//  abc</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(s1.</span><span style="color:#A6E22E;">trimEnd</span><span style="color:#F8F8F2;">()) </span><span style="color:#88846F;">// abc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器还部署了额外的两个方法，trimLeft()是trimStart()的别名，trimRight()是trimEnd()的别名。</p><h2 id="function-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#function-prototype-tostring" aria-hidden="true">#</a> Function.prototype.toString</h2><p>ES2019对函数实例的toString()方法做出了修改。toString()方法返回函数代码本身,以前会省略注释和空格。 修改后的toString()方法明确要求返回一摸一样的原始代码</p><h2 id="array-prototype-sort" tabindex="-1"><a class="header-anchor" href="#array-prototype-sort" aria-hidden="true">#</a> Array.prototype.sort</h2><p>ES2019明确规定,Array.prototype.sort()的默认排序算法必须稳定。</p><h2 id="symbol-prototype-description" tabindex="-1"><a class="header-anchor" href="#symbol-prototype-description" aria-hidden="true">#</a> Symbol.prototype.description</h2><p>返回symbol的描述</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> symbol </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(symbol.description) </span><span style="color:#88846F;">// foo</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-fromentries" tabindex="-1"><a class="header-anchor" href="#object-fromentries" aria-hidden="true">#</a> Object.fromEntries</h2><p>Object.entries() 可以将一个对象转化为键值对的二维数组, Object.fromEntries()是对 Object.entries()的反向操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">30</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">(object)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[ [&#39;firstName&#39;, &#39;kyrie&#39;], [&#39;lastName&#39;, &#39;irving&#39;], [&#39;age&#39;, 30]]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> reverseObject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">fromEntries</span><span style="color:#F8F8F2;">(array)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">const reverseObject = {</span></span>
<span class="line"><span style="color:#88846F;">  firstName: &#39;kyrie&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  lastName: &#39;irving&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  age: 30</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> entries </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E6DB74;">&#39;baz&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;42&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">fromEntries</span><span style="color:#F8F8F2;">(entries))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  foo: &#39;bar&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  baz: 42</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries",target:"_blank",rel:"noopener noreferrer"},F=n(`<h2 id="catch命令的参数省略" tabindex="-1"><a class="header-anchor" href="#catch命令的参数省略" aria-hidden="true">#</a> catch命令的参数省略</h2><p>JavaScript语言的 try...catch结构, 以前明确要求catch命令后面必须跟参数,接受try代码块抛出的错误对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;">(err) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES2019做出了改变,允许catch语句省略参数。</p>`,4);function y(v,m){const a=l("ExternalLinkIcon");return o(),p("div",null,[t,s("p",null,[s("a",d,[r("MDN-Object.fromEntries"),i(a)])]),F])}const h=e(c,[["render",y],["__file","es2019.html.vue"]]);export{h as default};
