import{_ as s}from"./framework-c27b6911.js";import{o as n,c as a,b as l}from"./app-ec006255.js";const p={},o=l(`<h1 id="es2020" tabindex="-1"><a class="header-anchor" href="#es2020" aria-hidden="true">#</a> ES2020</h1><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h2><p>ES2020引入import函数,支持动态加载模块, 可以在需要的时候,再加载某个模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./math.js&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="globalthis" tabindex="-1"><a class="header-anchor" href="#globalthis" aria-hidden="true">#</a> globalThis</h2><p>全局属性globalThis包含全局的this值,提供了一个标准的方法来获取不同环境下的全局this对象。确保可以在有无窗口的各种环境下 正常工作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// es6-shim</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getGlobal</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> self </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> self; }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> window </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> window; }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> global </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> global; }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;unable to locate global object&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> BigInt</h2><p>BigInt是一种内置对象, 它提供了一种方法来表示大于2^53 - 1的整数。BigInt可以表示任意大的整数。 可以在一个整数字面量后面加n的方式定义一个BigInt.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">Number.MAX_SAFE_INTEGER </span><span style="color:#88846F;">// 9007199254740991</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#A6E22E;">pow</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">53</span><span style="color:#F8F8F2;">)         </span><span style="color:#88846F;">// 9007199254740992</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AE81FF;">9007199254740992</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 9007199254740992</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#A6E22E;">pow</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">53</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">9007199254740993</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">9007199254740992</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// bigint</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bigint 也可以和 + - * / 等运算符一起使用。不能用于Math对象中等方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#AE81FF;">9007199254740992</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">9007199254740992</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">   </span><span style="color:#88846F;">// 18014398509481984n</span></span>
<span class="line"><span style="color:#A6E22E;">BigInt</span><span style="color:#F8F8F2;">(Number.MAX_SAFE_INTEGER)         </span><span style="color:#88846F;">// 9007199254740991n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#A6E22E;">pow</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">54</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// 报错 Cannot convert a BigInt value to a number</span></span>
<span class="line"><span style="color:#AE81FF;">2</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">**</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">54</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;">           </span><span style="color:#88846F;">// 18014398509481984n</span></span>
<span class="line"><span style="color:#F8F8F2;">10n.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">()      </span><span style="color:#88846F;">// &#39;10&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// / 操作符会向0取整</span></span>
<span class="line"><span style="color:#AE81FF;">5</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">3</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 1n</span></span>
<span class="line"><span style="color:#AE81FF;">5</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">2</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 2n</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">   </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#66D9EF;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-flat" tabindex="-1"><a class="header-anchor" href="#array-prototype-flat" aria-hidden="true">#</a> Array.prototype.flat</h2><p>Array.prototype.flat()用于将嵌套的数组 &#39;拉平&#39;, 变成一维的数组,该方法返回一个新数组。对愿数组没有影响。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">]].</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// [ 1, 2, 3, 4, 4, 6 ]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">],[[</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">]]].</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// [ 1, 2, 3, 4, [ 5, 6 ] ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">],[[</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">]]].</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// [ 1, 2, 3, 4, 5, 6 ]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">]]]]].</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[</span></span>
<span class="line"><span style="color:#88846F;">  1, 2, 3, 4,  4,</span></span>
<span class="line"><span style="color:#88846F;">  5, 7, 8, 9, 10</span></span>
<span class="line"><span style="color:#88846F;">]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flat()默认只会 拉平 一层, 如果想要拉平多层的嵌套数组, 可以将flat()方法的参数写一个整数, 或者 直接写成Infinity,不管有多少层嵌套,都会转成一维数组。</p><ul><li>如果有空位,flat方法会跳过空位</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// flat方法的实现</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">d</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(d </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> array.</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> array.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">prev</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">isArray</span><span style="color:#F8F8F2;">(next)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        prev </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prev.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(next, d</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(next){</span></span>
<span class="line"><span style="color:#F8F8F2;">          prev </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prev.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(next)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prev;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, [])</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">d</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> temp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">array]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(d </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> t </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> temp) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#A6E22E;">isArray</span><span style="color:#F8F8F2;">(item)){</span></span>
<span class="line"><span style="color:#F8F8F2;">        t.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(item, d</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(item){</span></span>
<span class="line"><span style="color:#F8F8F2;">          t.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(item)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> t;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> flat_array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">],[</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">, ,[</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">,[</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">]]]]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(flat_array, </span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[</span></span>
<span class="line"><span style="color:#88846F;">  1, 2, 3, 4,  5,</span></span>
<span class="line"><span style="color:#88846F;">  6, 7, 8, 9, 10</span></span>
<span class="line"><span style="color:#88846F;">]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(flat_array, </span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">[</span></span>
<span class="line"><span style="color:#88846F;">  1, 2, 3, 4,  5,</span></span>
<span class="line"><span style="color:#88846F;">  6, 7, 8, 9, 10</span></span>
<span class="line"><span style="color:#88846F;">]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-allsettled" tabindex="-1"><a class="header-anchor" href="#promise-allsettled" aria-hidden="true">#</a> Promise.allSettled</h2><p>Promise.allSettled()方法接收一个数组作为参数, 数组的每个成员都是一个Promise对象。并返回一个Promise对象。 所有Promise的状态都变更, 返回的Promise对象才会发生状态变更(不管是fulfilled还是rejected)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> resolved </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> rejected </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">allSettled</span><span style="color:#F8F8F2;">([resolved, rejected]).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;result&#39;</span><span style="color:#F8F8F2;">, result)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">result [</span></span>
<span class="line"><span style="color:#88846F;">  { status: &#39;fulfilled&#39;, value: 42 },</span></span>
<span class="line"><span style="color:#88846F;">  { status: &#39;rejected&#39;, reason: -1 }</span></span>
<span class="line"><span style="color:#88846F;">]</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链判断运算符" tabindex="-1"><a class="header-anchor" href="#链判断运算符" aria-hidden="true">#</a> 链判断运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> message_1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  body: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    user: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> message_2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  body: {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">message_1.body.user.firstName  </span><span style="color:#88846F;">// kyrie</span></span>
<span class="line"><span style="color:#F8F8F2;">message_2.body.user.firstName; </span></span>
<span class="line"><span style="color:#88846F;">//  can not read property &#39;firstName&#39; of undefined</span></span>
<span class="line"><span style="color:#88846F;">// 上面的例子判断是否有firstName的时候 需要每一层都判断 对象是否有属性。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> firstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> message_2?.body?.user?.firstName  </span><span style="color:#88846F;">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左侧的对象是否为null或undefined.如果是的话 就不再往下运算 而是返回undefined 可选链式运算符有三种语法形式: 可选的静态属性访问, 可选的计算属性访问, 可选的函数调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">obj?.prop</span></span>
<span class="line"><span style="color:#F8F8F2;">obj?.[exp]</span></span>
<span class="line"><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">?.()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断null" tabindex="-1"><a class="header-anchor" href="#判断null" aria-hidden="true">#</a> 判断Null</h2><p>?? 只要运算符左侧的值为null 或undefined时, 才会返回右侧的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">( </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),e=[o];function F(c,r){return n(),a("div",null,e)}const y=s(p,[["render",F],["__file","es2020.html.vue"]]);export{y as default};
