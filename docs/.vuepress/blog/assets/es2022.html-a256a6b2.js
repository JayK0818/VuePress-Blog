import{_ as e}from"./framework-c27b6911.js";import{r as o,o as p,c as t,d as s,e as a,a as l,b as r}from"./app-ec006255.js";const c={},F=r(`<h1 id="es2022" tabindex="-1"><a class="header-anchor" href="#es2022" aria-hidden="true">#</a> ES2022</h1><h2 id="at" tabindex="-1"><a class="header-anchor" href="#at" aria-hidden="true">#</a> at</h2><p>数组实例上新增了at()方法, 接受一个整数作为参数,返回对应位置等成员. 支持负索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> players </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;wade&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">players.</span><span style="color:#A6E22E;">at</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// kyrie</span></span>
<span class="line"><span style="color:#F8F8F2;">players.</span><span style="color:#A6E22E;">at</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// wade</span></span>
<span class="line"><span style="color:#F8F8F2;">players.</span><span style="color:#A6E22E;">at</span><span style="color:#F8F8F2;">(players.length)  </span><span style="color:#88846F;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> string </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">string.</span><span style="color:#A6E22E;">at</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// h</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-hasown" tabindex="-1"><a class="header-anchor" href="#object-hasown" aria-hidden="true">#</a> Object.hasOwn</h2><p>The Object.hasOwn() static method returns true if the specified object has the indicated property as its own property. If the property is inherited, or does not exist, the method returns false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { foo: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">hasOwn</span><span style="color:#F8F8F2;">(object, </span><span style="color:#E6DB74;">&quot;foo&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> object2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">({ foo: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">hasOwn</span><span style="color:#F8F8F2;">(object2, </span><span style="color:#E6DB74;">&quot;foo&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> object3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">hasOwn</span><span style="color:#F8F8F2;">(object3, </span><span style="color:#E6DB74;">&quot;foo&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="findlast-findlastindex" tabindex="-1"><a class="header-anchor" href="#findlast-findlastindex" aria-hidden="true">#</a> findLast / findLastIndex</h2><p>ES2022新增了两个方法 findLast()和findLastIndex(),从数组的最后一个成员开始, 依次向前检查。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { value: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { value: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { value: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { value: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">findLast</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n.value </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// { value: 3 }</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#A6E22E;">findLastIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> n.value </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),i={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn",target:"_blank",rel:"noopener noreferrer"},y={href:"https://es6.ruanyifeng.com/#README",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md",target:"_blank",rel:"noopener noreferrer"};function v(u,b){const n=o("ExternalLinkIcon");return p(),t("div",null,[F,s("p",null,[s("a",i,[a("MDN-hasOwn"),l(n)])]),s("p",null,[s("a",y,[a("ES6入门教程"),l(n)])]),s("p",null,[s("a",d,[a("ECMAScript-TC39"),l(n)])])])}const f=e(c,[["render",v],["__file","es2022.html.vue"]]);export{f as default};
