import{_ as s}from"./framework-c27b6911.js";import{o as n,c as l,b as a}from"./app-ec006255.js";const o={},p=a(`<h1 id="逆波兰表达式求值" tabindex="-1"><a class="header-anchor" href="#逆波兰表达式求值" aria-hidden="true">#</a> 逆波兰表达式求值</h1><p>给你一个字符串数组 <strong>tokens</strong>, 表示一个根据 <em>逆波兰表示法</em> 表示的算术表达式。 请你计算该表达式。返回一个表示表达式值的整数。</p><ul><li>有效的算符为 &#39;+&#39; &#39;-&#39; &#39;*&#39; &#39;-&#39;</li><li>每个操作数 都可以是一个整数或另一个表达式</li><li>两个整数之间的除法总是 <strong>向零截断</strong></li><li>表达式中不含除0运算</li><li>输入是一个根据逆波兰表示法表示的算术表达式</li><li>答案以及所有中间计算结果可以用<strong>32位</strong>整数表示。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> tokens </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;2&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;1&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;+&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;3&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;*&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#88846F;">// 9 该算式转化为算术表达式为   ((2 + 1) * 3) = 9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> tokens </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;4&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;13&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;5&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;/&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;+&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#88846F;">// (4 + (13 / 5)) = 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> tokens </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;10&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;6&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;9&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;3&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;+&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;-11&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;*&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;/&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;*&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;17&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;+&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;5&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;+&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#88846F;">// ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = 22</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解法一</strong></p><p>遇到数字则入栈, 遇到运算符则取出栈顶两个数字进行计算,并将结果压入栈中。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">eval_rpn</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">tokens</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">[]) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> stack</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">[] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> operators </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;+&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;-&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;*&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, length </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> tokens.length; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> token </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> tokens[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">operators.</span><span style="color:#A6E22E;">includes</span><span style="color:#F8F8F2;">(token)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      stack.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(token))</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> stack.</span><span style="color:#A6E22E;">pop</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> stack.</span><span style="color:#A6E22E;">pop</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (token) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;+&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">          result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> s2</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">break</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;-&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">          result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> s1</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">break</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;*&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">          result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> s2</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">break</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">          result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> s2</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      stack.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(result </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">floor</span><span style="color:#F8F8F2;">(result) </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">ceil</span><span style="color:#F8F8F2;">(result))</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(stack[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),e=[p];function F(t,c){return n(),l("div",null,e)}const i=s(o,[["render",F],["__file","evaluate-reverse-polish-expression.html.vue"]]);export{i as default};
