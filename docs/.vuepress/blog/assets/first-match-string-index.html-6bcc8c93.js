import{_ as s}from"./framework-c27b6911.js";import{o as n,c as a,b as l}from"./app-ec006255.js";const e={},o=l(`<h1 id="字符串中第一个匹配项的下标" tabindex="-1"><a class="header-anchor" href="#字符串中第一个匹配项的下标" aria-hidden="true">#</a> 字符串中第一个匹配项的下标</h1><p>给你两个字符串 <strong>haystack</strong> 和 <strong>needle</strong>, 请你在 <strong>haystack</strong> 字符串中找出 <strong>needle</strong> 字符串的第一个匹配项的下标(从0开始)。如果 <strong>needle</strong> 不是 <strong>haystack</strong> 的一部分, 则返回 <em>-1</em>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">haystack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;sadbutsad&#39;</span><span style="color:#F8F8F2;">, needle </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;sad&#39;</span></span>
<span class="line"><span style="color:#88846F;">// &#39;sad&#39; 在下标 0 和 6 处匹配. 所以返回0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">haystack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;leetcode&#39;</span><span style="color:#F8F8F2;">, needle </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;leeto&#39;</span></span>
<span class="line"><span style="color:#88846F;">// -1 &#39;leeto&#39; 没有在 &#39;leetcode&#39;中出现。 所以返回-1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解法一</strong></p><p>直接利用原生js提供的indexOf 方法, 返回第一个匹配的元素下标</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">match_first_string_index</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">haystack</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">needle</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> haystack.</span><span style="color:#A6E22E;">indexOf</span><span style="color:#F8F8F2;">(needle)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解法二</strong></p><p>for循环 每次截取 和 <strong>needle</strong> 相同长度的 子字符串进行比较, 如果相等, 跳出循环。返回此时的下标即可。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">match_first_string_index</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">haystack</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">needle</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> length_1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> haystack.length</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> length_2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> needle.length</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (length_2 </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> length_1) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> length_1 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> length_2; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> substring </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> haystack.</span><span style="color:#A6E22E;">substring</span><span style="color:#F8F8F2;">(i, length_2 </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> i)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(substring)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (substring </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> needle) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),p=[o];function t(F,c){return n(),a("div",null,p)}const y=s(e,[["render",t],["__file","first-match-string-index.html.vue"]]);export{y as default};
