import{_ as o}from"./framework-c27b6911.js";import{r as p,o as e,c,d as s,e as a,a as l,b as F}from"./app-ec006255.js";const r={},t=F(`<h1 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h1><p>JSON对象包含两个方法: JSON.stringify() 和 JSON.parse(). 除了这两个方法,JSON对象本身并没有其他作用,也不能被调用 或者作为构造函数调用。</p><h2 id="json-stringify" tabindex="-1"><a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a> JSON.stringify()</h2><p>JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数. 则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 1. 对大多数简单值来说,JSON.stringify()效果和toString()一样</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// &#39;123&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// &#39;true&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// &#39;null&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;123&quot;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// &quot;&quot;123&quot;&quot;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">set.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">map.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(set), JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(map)) </span><span style="color:#88846F;">// {} {}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">))        </span><span style="color:#88846F;">// null</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">))   </span><span style="color:#88846F;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2. 转换值如果有 toJSON() 方法，该方法定义什么值将被序列化</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">toJSON</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {name:</span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  name:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj)) </span><span style="color:#88846F;">// {&quot;name&quot;:&quot;lebron&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 3 布尔值,数字 字符串的包装对象在序列化过程中会自动转换成对应的原始值</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  a:</span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">  b:</span><span style="color:#A6E22E;">String</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">  c:</span><span style="color:#A6E22E;">Boolean</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">),</span><span style="color:#A6E22E;">String</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">),</span><span style="color:#A6E22E;">Boolean</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj)) </span><span style="color:#88846F;">// {&quot;a&quot;:123,&quot;b&quot;:&quot;123&quot;,&quot;c&quot;:false}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(array)) </span><span style="color:#88846F;">// [123,&quot;123&quot;,false]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*4. undefined任意的函数以及symbol值,在序列化的过程中会被忽略</span></span>
<span class="line"><span style="color:#88846F;">(出现在数组对象的属性值中时被转换成null(以保证单元位置不变) */</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">), JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {})) </span></span>
<span class="line"><span style="color:#88846F;">// undefined undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">)]: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  a: </span><span style="color:#AE81FF;">undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj))  </span><span style="color:#88846F;">// {}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  a: </span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {},</span></span>
<span class="line"><span style="color:#F8F8F2;">  c: Symbol[</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  d: </span><span style="color:#E6DB74;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">,</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(){},</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">),</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj))  </span><span style="color:#88846F;">// {&quot;d&quot;:&quot;hello world&quot;}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(array))  </span><span style="color:#88846F;">// [null,null,null,&quot;hello world&quot;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">//5. 包含循环引用的对象(对象之间相互引用,形成无线循环)执行此方法会报错</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}, b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">a.foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">b.bar </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(a))</span></span>
<span class="line"><span style="color:#88846F;">// Converting circular structure to JSON</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">//6. 所有以Symbol为属性键的属性都会被完全忽略掉,即使replacer参数中强制指定包含了它们</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">)]:</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">)]:</span><span style="color:#E6DB74;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj))  </span><span style="color:#88846F;">// {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 6. Date日期调用了toJSON()将其转换为了string字符串 因此会被当做字符串处理</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">())) </span><span style="color:#88846F;">// &quot;2021-09-30T01:36:41.191Z&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 7 NaN 和 Infinity 格式的数值及 null 都会被当做 null。</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">NaN</span><span style="color:#F8F8F2;">), JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">), </span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">), JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">Infinity</span><span style="color:#F8F8F2;">)) </span></span>
<span class="line"><span style="color:#88846F;">// null null null null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>replacer参数 可以是一个函数或者数组. 作为函数,它有两个参数, 键(key)和值(value),它们都会被序列化。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在开始时,replacer函数会被传入一个空字符串作为key值,代表着要被stringify的这个对象。随后每个对象或数组上的属性会被依次传入。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  foundation:</span><span style="color:#E6DB74;">&#39;Mozilla&#39;</span><span style="color:#F8F8F2;">, model:</span><span style="color:#E6DB74;">&#39;box&#39;</span><span style="color:#F8F8F2;">, </span></span>
<span class="line"><span style="color:#F8F8F2;">  week:</span><span style="color:#AE81FF;">45</span><span style="color:#F8F8F2;">, transport:</span><span style="color:#E6DB74;">&#39;car&#39;</span><span style="color:#F8F8F2;">, month:</span><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">replacer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(foo,replacer)) </span><span style="color:#88846F;">// {&quot;week&quot;:45,&quot;month&quot;:7}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 如果replacer是一个数组, 那么它必定是一个字符串数组, 包含要处理对象的属性名称。</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(foo, [</span><span style="color:#E6DB74;">&#39;week&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;month&#39;</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#88846F;">// &#39;{&quot;week&quot;:45,&quot;month&quot;:7}&#39;, 只保留 “week” 和 “month” 属性值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> foo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  foundation:</span><span style="color:#E6DB74;">&#39;Mozilla&#39;</span><span style="color:#F8F8F2;">, model:</span><span style="color:#E6DB74;">&#39;box&#39;</span><span style="color:#F8F8F2;">, </span></span>
<span class="line"><span style="color:#F8F8F2;">  week:</span><span style="color:#AE81FF;">45</span><span style="color:#F8F8F2;">, transport:</span><span style="color:#E6DB74;">&#39;car&#39;</span><span style="color:#F8F8F2;">, month:</span><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">replacer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(key </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      name:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      age:</span><span style="color:#E6DB74;">&#39;29&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// {&quot;name&quot;:&quot;kyrie&quot;,&quot;age&quot;:&quot;29&quot;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>toJSON()</p><p>如果一个被序列化的对象拥有toJSON方法,那么该toJSON方法就会覆盖该对象默认的序列化行为:不是该对象被序列化,而是调用toJSON()后返回值被序列化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  foo: </span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">toJSON</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj);      </span><span style="color:#88846F;">// &#39;&quot;bar&quot;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">({x: obj}); </span><span style="color:#88846F;">// &#39;{&quot;x&quot;:&quot;bar&quot;}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>箭头函数不能用来定义toJSON()方法,主要原因是箭头函数的词法作用域是全局作用域。</p></div><p>使用场景:</p><ol><li>JSON.stringify()可以判断数组是否包含对象,或者判断对象是否相等</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  {name:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">  {name:</span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">  {name:</span><span style="color:#E6DB74;">&#39;wade&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {name:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(data).</span><span style="color:#A6E22E;">indexOf</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj)))  </span><span style="color:#88846F;">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>localStorage/sessionStorage默认只能存储字符串，如果存储的是一个对象,则会调用toString()方法变为[object Object]</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {firstName:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,lastName:</span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(window.localStorage.</span><span style="color:#A6E22E;">setItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">,JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj)))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>可以实现深拷贝,开发中,有时候怕影响原始数据,可以深拷贝一份数据做任意操作。</li></ol><p>JSON.stringify() 还有一个可选的第三个参数space, 用来指定输出的缩紧格式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;james&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">38</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(player, </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(player, </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;------&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">   &quot;firstName&quot;: &quot;lebron&quot;,</span></span>
<span class="line"><span style="color:#88846F;">   &quot;lastName&quot;: &quot;james&quot;,</span></span>
<span class="line"><span style="color:#88846F;">   &quot;age&quot;: 38</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">------&quot;firstName&quot;: &quot;lebron&quot;,</span></span>
<span class="line"><span style="color:#88846F;">------&quot;lastName&quot;: &quot;james&quot;,</span></span>
<span class="line"><span style="color:#88846F;">------&quot;age&quot;: 38</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-parse" tabindex="-1"><a class="header-anchor" href="#json-parse" aria-hidden="true">#</a> JSON.parse()</h2><p>JSON.parse()用来解析JSON字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;{}&#39;</span><span style="color:#F8F8F2;">);              </span><span style="color:#88846F;">// {}</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;true&#39;</span><span style="color:#F8F8F2;">);            </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&quot;foo&quot;&#39;</span><span style="color:#F8F8F2;">);           </span><span style="color:#88846F;">// &quot;foo&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;[1, 5, &quot;false&quot;]&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// [1, 5, &quot;false&quot;]</span></span>
<span class="line"><span style="color:#F8F8F2;">JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;null&#39;</span><span style="color:#F8F8F2;">);            </span><span style="color:#88846F;">// null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON#javascript_object_notation",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"};function d(v,u){const n=p("ExternalLinkIcon");return e(),c("div",null,[t,s("p",null,[s("a",i,[a("MDN-JavaScript Object Notation"),l(n)])]),s("p",null,[s("a",y,[a("MDN-JSON.stringify()"),l(n)])])])}const m=o(r,[["render",d],["__file","json.html.vue"]]);export{m as default};
