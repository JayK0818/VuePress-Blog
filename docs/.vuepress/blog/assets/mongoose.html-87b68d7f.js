import{_ as l}from"./framework-c27b6911.js";import{r as e,o as p,c as o,d as s,e as i,a as c,b as n}from"./app-ec006255.js";const r={},F=n(`<h1 id="mongoose" tabindex="-1"><a class="header-anchor" href="#mongoose" aria-hidden="true">#</a> Mongoose</h1><p>elegant mongodb object modeling for nodejs</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">npm install mongoose </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">save</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 连接数据库</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mongoose </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mongoose&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">mongoose.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mongodb://localhost:27017/database&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  bufferCommands: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  user: , </span><span style="color:#88846F;">// username</span></span>
<span class="line"><span style="color:#F8F8F2;">  pass: , </span><span style="color:#88846F;">// password</span></span>
<span class="line"><span style="color:#F8F8F2;">  autoIndex: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// index builds can cause performance degradation</span></span>
<span class="line"><span style="color:#F8F8F2;">  dbName: </span><span style="color:#E6DB74;">&#39;test&#39;</span><span style="color:#F8F8F2;">,   </span><span style="color:#88846F;">// Specifies which database to connect to</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">Mongoose lets you start using your models immediately, without waiting for mongoose</span></span>
<span class="line"><span style="color:#88846F;">to establish a connection to MongoDB</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">// 全局禁止缓冲</span></span>
<span class="line"><span style="color:#F8F8F2;">mongoose.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;bufferCommands&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="connect" tabindex="-1"><a class="header-anchor" href="#connect" aria-hidden="true">#</a> Connect</h2><p>There are two classes of errors that can occur with a Mongoose connection.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">mongoose.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mongodb://localhost:27017/test&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mongodb://localhost:27017/test&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;">(err) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在初始连接数据库失败的时候, Mongoose将会抛出一个 error 异常事件 并且Mongoose 不会自动尝试重新连接。但是在初始连接建立后 触发的异常, Mongoose 会尝试重新连接并同样抛出 error 事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// To handle errors after initial connection was established.</span></span>
<span class="line"><span style="color:#F8F8F2;">mongoose.connection.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;error&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Connection Events</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">connection    </span><span style="color:#88846F;">// Emitted when Mongoose starts making its initial connection</span></span>
<span class="line"><span style="color:#F8F8F2;">connected     </span><span style="color:#88846F;">// Emmitted when Mongoose successfully makes its initial connection</span></span>
<span class="line"><span style="color:#F8F8F2;">disconnected  </span><span style="color:#88846F;">// lost connection</span></span>
<span class="line"><span style="color:#F8F8F2;">reconnected   </span><span style="color:#88846F;">//  Emitted if Mongoose lost connectivity to MongoDB and successfully reconnected</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="schemas" tabindex="-1"><a class="header-anchor" href="#schemas" aria-hidden="true">#</a> Schemas</h2><p>Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> mongoose </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;mongoose&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { Schema } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mongoose;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> blogSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  title:  String, </span><span style="color:#88846F;">// 简写方式 ---&gt; { type: String }</span></span>
<span class="line"><span style="color:#F8F8F2;">  author: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">  body:   String,</span></span>
<span class="line"><span style="color:#F8F8F2;">  comments: [{ body: String, date: Date }],</span></span>
<span class="line"><span style="color:#F8F8F2;">  date: { type: Date, default: Date.now },</span></span>
<span class="line"><span style="color:#F8F8F2;">  meta: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    votes: Number,</span></span>
<span class="line"><span style="color:#F8F8F2;">    favs:  Number</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="virtuals" tabindex="-1"><a class="header-anchor" href="#virtuals" aria-hidden="true">#</a> Virtuals</h3><p>Virtuals are documents properties that you can get and set but that do not get persisted to MongoDB. The getters are useful for formatting or combining fields.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> PlayerSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: String</span></span>
<span class="line"><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#88846F;">// 第一种方式</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  virtuals: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    fullName: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name.firstName </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;-&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name.lastName</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// 第二种方式</span></span>
<span class="line"><span style="color:#F8F8F2;">PlayerSchema.</span><span style="color:#A6E22E;">virtual</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;reverseFullName&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name.lastName </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;-&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name.firstName</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">model</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, PlayerSchema)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> res.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item.fullName)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> reverst_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> res.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item.reverseFullName)</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(list, reverst_list)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// [ &#39;lebron-james&#39; ] [ &#39;james-lebron&#39; ]</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="models" tabindex="-1"><a class="header-anchor" href="#models" aria-hidden="true">#</a> Models</h2><p>An instance of a model is called document. Models are responsible for creating and reading documents from the underlying MongoDB database.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mongoose </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mongoose&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> PlayerSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: String</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// Mongoose automatically looks for the plural, lowercased version of your model name.</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">model</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, PlayerSchema)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 保存数据的第一种方式(保存成功后都会返回保存的数据)</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">insertMany</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  {</span></span>
<span class="line"><span style="color:#F8F8F2;">    firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    lastName: </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    age: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    create_time: Date.</span><span style="color:#A6E22E;">now</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  {</span></span>
<span class="line"><span style="color:#F8F8F2;">    firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    lastName: </span><span style="color:#E6DB74;">&#39;james&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    age: </span><span style="color:#AE81FF;">38</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">]).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 第二种</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kevin&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;love&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">34</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">player.</span><span style="color:#A6E22E;">save</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 第三种</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kevin&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;durant&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: </span><span style="color:#AE81FF;">34</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// query</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// delete</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">deleteOne</span><span style="color:#F8F8F2;">({ age: </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;"> }).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// update</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">updateOne</span><span style="color:#F8F8F2;">({ firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">}, { lastName: </span><span style="color:#E6DB74;">&#39;KingJames&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="queries" tabindex="-1"><a class="header-anchor" href="#queries" aria-hidden="true">#</a> Queries</h2><p>Mongoose models provide several static helper functions for CRUD operations.</p><ol><li>find / findOne / findById</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { log } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> console</span></span>
<span class="line"><span style="color:#88846F;">// Promise写法</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res) })</span></span>
<span class="line"><span style="color:#88846F;">// 回调函数写法, 错误优先, 如果发生错误,则err是一个错误对象,data为null, 否则err为null.</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">({}, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data) })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">({ age: </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;"> }).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> query </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Player.</span><span style="color:#A6E22E;">findOne</span><span style="color:#F8F8F2;">({ firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#88846F;">// execute the query at a later time</span></span>
<span class="line"><span style="color:#F8F8F2;">query.</span><span style="color:#A6E22E;">exec</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">player</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">    {</span></span>
<span class="line"><span style="color:#88846F;">      _id: new ObjectId(&quot;6340d00d0098378fe6bfc1f6&quot;),</span></span>
<span class="line"><span style="color:#88846F;">      firstName: &#39;lebron&#39;,</span></span>
<span class="line"><span style="color:#88846F;">      lastName: &#39;james&#39;,</span></span>
<span class="line"><span style="color:#88846F;">      age: 38,</span></span>
<span class="line"><span style="color:#88846F;">      create_time: 2022-10-08T01:19:09.983Z,</span></span>
<span class="line"><span style="color:#88846F;">      __v: 0</span></span>
<span class="line"><span style="color:#88846F;">    }</span></span>
<span class="line"><span style="color:#88846F;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">findOne</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)) </span><span style="color:#88846F;">// 默认查找第一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">findOne</span><span style="color:#F8F8F2;">({age: </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res))  </span><span style="color:#88846F;">// 第一个符合条件的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">findById</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;633691c7e6c86518d6f64a19&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 链式调用, 按年龄排序</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">sort</span><span style="color:#F8F8F2;">({age: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res) })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// deleteMany</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">deleteMany</span><span style="color:#F8F8F2;">({age: </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// deleteOne</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">deleteOne</span><span style="color:#F8F8F2;">({ firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// findByIdAndDelete</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">findByIdAndDelete</span><span style="color:#F8F8F2;">({_id: </span><span style="color:#E6DB74;">&#39;63369901f83a3cb0bcd2a4bd&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// findByIdAndUpdate</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">findByIdAndUpdate</span><span style="color:#F8F8F2;">({ _id: </span><span style="color:#E6DB74;">&#39;6340d00d0098378fe6bfc1f6&#39;</span><span style="color:#F8F8F2;"> }, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;king&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// updateOne</span></span>
<span class="line"><span style="color:#F8F8F2;">Player.</span><span style="color:#A6E22E;">updateOne</span><span style="color:#F8F8F2;">({ firstName: </span><span style="color:#E6DB74;">&#39;king&#39;</span><span style="color:#F8F8F2;">}, { firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The lean option tells Mongoose to skip hybrating the result documents, This makes queries faster and less memory intensive.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// Lean options</span></span>
<span class="line"><span style="color:#88846F;">// 官网的一个demo</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> personSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    get: capitalizeFirstLetter</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    get: capitalizeFirstLetter</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">personSchema.</span><span style="color:#A6E22E;">virtual</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;fullName&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.firstName</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> </span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.lastName</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">capitalizeFirstLetter</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> v.</span><span style="color:#A6E22E;">charAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">toUpperCase</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> v.</span><span style="color:#A6E22E;">substring</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">model</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Person&#39;</span><span style="color:#F8F8F2;">, personSchema)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// model&#39;s getters and virtuals do not run if you enable lean</span></span>
<span class="line"><span style="color:#F8F8F2;">Person.</span><span style="color:#A6E22E;">findOne</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">lean</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res.firstName, res.lastName, res.fullName)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// Benjamin / Sisko / Benjamin Sisko</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">Person.</span><span style="color:#A6E22E;">findOne</span><span style="color:#F8F8F2;">({}).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res.firstName, res.lastName, res.fullName)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// benjamin / sisko / undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if you do not modify the query results and do not use custom getters, you should use <strong>lean()</strong>.</p>`,26),t={href:"https://mongoosejs.com/docs/tutorials/lean.html#lean-and-populate",target:"_blank",rel:"noopener noreferrer"},d=n(`<h2 id="validation" tabindex="-1"><a class="header-anchor" href="#validation" aria-hidden="true">#</a> Validation</h2><h3 id="build-in-validators" tabindex="-1"><a class="header-anchor" href="#build-in-validators" aria-hidden="true">#</a> Build-in Validators</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">内置的验证器</span></span>
<span class="line"><span style="color:#88846F;">All schemaTypes hava the build-in required Validators</span></span>
<span class="line"><span style="color:#88846F;">Numbers have min and max Validators</span></span>
<span class="line"><span style="color:#88846F;">Strings have enum, match, minLength and maxLength validators</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> catSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    required: [</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Why no name?&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 第二项为错误提示信息</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: Number,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    max: [</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age is not legal&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  drink: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    enum: [</span><span style="color:#E6DB74;">&#39;Milk&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Water&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-error-messages" tabindex="-1"><a class="header-anchor" href="#custom-error-messages" aria-hidden="true">#</a> Custom Error Messages</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> catSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: Number,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;must be at least 0, got {VALUE}&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  drink: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    required: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    enum: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      values: [</span><span style="color:#E6DB74;">&#39;Water&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Milk&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">      message: </span><span style="color:#E6DB74;">&#39;{VALUE} is not supported&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unique" tabindex="-1"><a class="header-anchor" href="#unique" aria-hidden="true">#</a> Unique</h3><p>The unique option for schema is not a validator. It is a convenient helper for building MongoDB unique indexes.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  username: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: [</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;at least 6 characters&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    max: [</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;length is not legal&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    unique: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> User </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">model</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;user&#39;</span><span style="color:#F8F8F2;">, userSchema)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">User.</span><span style="color:#A6E22E;">insertMany</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  { username: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { username: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#88846F;">//duplicate key error collection: test.users index: username_1 dup key: { username: &quot;lebron&quot; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-validators" tabindex="-1"><a class="header-anchor" href="#custom-validators" aria-hidden="true">#</a> Custom Validators</h3><p>If the build-in validators are not enough, you can define custom validators to suit your needs.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  username: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    validate: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">validator</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> v.length </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> v.length </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">message</span><span style="color:#F8F8F2;">: </span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">props.value</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> is not valid\`</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    required: [</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;username is required&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required-validators-on-nested-objects" tabindex="-1"><a class="header-anchor" href="#required-validators-on-nested-objects" aria-hidden="true">#</a> Required Validators on nested objects</h3><p>对象嵌套时 字段的验证方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 第一种方式</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  username: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    firstName: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">      required: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    lastName: { </span></span>
<span class="line"><span style="color:#F8F8F2;">      type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">      required: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 嵌套一个schema</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> fullNameSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    required: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">    required: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  username: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: fullNameSchema,</span></span>
<span class="line"><span style="color:#F8F8F2;">    required: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="timestamps" tabindex="-1"><a class="header-anchor" href="#timestamps" aria-hidden="true">#</a> Timestamps</h2><p>Mongoose schemas support a timestamps option. If you set <strong>timestamps: true</strong>, Mongoose will add two properties of type <em>Date</em> to your schema:</p><ol><li>createAt: a date representing when this document was created</li><li>updateAt: a date representing when this document last updated</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  username: String,</span></span>
<span class="line"><span style="color:#F8F8F2;">}, { timestamps: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> User </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> userSchema.</span><span style="color:#A6E22E;">model</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;user&#39;</span><span style="color:#F8F8F2;">, userSchema)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">User.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">({username: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  _id: 63414767a4b23046448fe263,</span></span>
<span class="line"><span style="color:#88846F;">  firstName: lebron,</span></span>
<span class="line"><span style="color:#88846F;">  __v: 0,</span></span>
<span class="line"><span style="color:#88846F;">  createdAt: 2022-10-08T09:48:23.727+00:00,</span></span>
<span class="line"><span style="color:#88846F;">  updatedAt: 2022-10-08T09:48:23.727+00:00</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 自定义createdAt 和 updatedAt 属性名</span></span>
<span class="line"><span style="color:#88846F;">// The **createdAt** property is immutable</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({ name: String }, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  timestamps: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    createdAt: </span><span style="color:#E6DB74;">&#39;created_at&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// Use \`created_at\` to store the created date</span></span>
<span class="line"><span style="color:#F8F8F2;">    updatedAt: </span><span style="color:#E6DB74;">&#39;updated_at&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// and \`updated_at\` to store the last updated date</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// timestamps on subdocuments</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> roleSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({ value: String }, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  timestamps: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> userSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">Schema</span><span style="color:#F8F8F2;">({ name: String, roles: [roleSchema]})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> User </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mongoose.</span><span style="color:#A6E22E;">model</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;user&#39;</span><span style="color:#F8F8F2;">, userSchema)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">User.</span><span style="color:#A6E22E;">insertMany</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    roles: [</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">        value: </span><span style="color:#E6DB74;">&#39;admin&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  _id: 6342277be004bae12867197e,</span></span>
<span class="line"><span style="color:#88846F;">  name: &quot;kyrie&quot;,</span></span>
<span class="line"><span style="color:#88846F;">  roles: [{</span></span>
<span class="line"><span style="color:#88846F;">    value: &quot;admin&quot;,</span></span>
<span class="line"><span style="color:#88846F;">    _id: 6342277be004bae12867197f,</span></span>
<span class="line"><span style="color:#88846F;">    createdAt:2022-10-09T01:44:27.026+00:00,</span></span>
<span class="line"><span style="color:#88846F;">    updatedAt: 2022-10-09T01:44:27.026+00:00,</span></span>
<span class="line"><span style="color:#88846F;">    __v:0</span></span>
<span class="line"><span style="color:#88846F;">  }]</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">// Overwriting a subdocument will also overwrite createdAt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function y(v,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[F,s("p",null,[s("a",t,[i("Faster Mongoose Queries With Lean"),c(a)])]),d])}const E=l(r,[["render",y],["__file","mongoose.html.vue"]]);export{E as default};
