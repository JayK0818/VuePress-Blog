import{_ as p}from"./framework-c27b6911.js";import{r as o,o as c,c as F,d as s,e as l,a as e,b as n}from"./app-ec006255.js";const r={},t=n(`<h1 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> Node.js</h1><h2 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h2><p>Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 Node.js 处理二进制数据. Buffer对象类似于数组,它的元素为16进制的两位数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">alloc</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// &lt;Buffer 00 00 00 00 00&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">alloc</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// &lt;Buffer 61 61 61 61 61&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// 默认使用utf-8编码进行转码和存储</span></span>
<span class="line"><span style="color:#88846F;">// &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 将buffer转换为字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(buffer.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">())  </span><span style="color:#88846F;">// hello world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 合并buffer</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buf1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buf2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Buffer.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">([buf1, buf2]).</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 设置编码方式</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;utf8&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(b3.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;utf16le&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 敨汬⁯潷汲</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(b3.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;base64&#39;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// aGVsbG8gd29ybGQ=</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// hello.txt</span></span>
<span class="line"><span style="color:#88846F;">/* 窗前明月光,疑似地上床。</span></span>
<span class="line"><span style="color:#88846F;">举头望明月,低头思故乡。*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 从输入流中读取buffer</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> rs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./hello.txt&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  data </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chunk</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码在 data += chunk 时隐藏了toString()操作, 等价于data = data.toString() + chunk.toString(). 在中文下可能会出现乱码问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 添加这行代码, 这是每次可读流读取的buffer长度为11.</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> rs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./hello.txt&#39;</span><span style="color:#F8F8F2;">, { highWaterMark: </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">窗前明��光，疑���地上霜。</span></span>
<span class="line"><span style="color:#88846F;">举头望明月��低头思���乡。</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 1. 可以通过buffer.concat方法将buffer拼接后再转换为字符串。</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  array.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(chunk)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Buffer.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(array).</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">  窗前明月光,疑似地上霜。</span></span>
<span class="line"><span style="color:#88846F;">  举头望明月,低头思故乡。</span></span>
<span class="line"><span style="color:#88846F;">  */</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2: 可以通过设置可读流的编码方式</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">setEncoding</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;utf8&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  data </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chunk</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">  窗前明月光,疑似地上霜。</span></span>
<span class="line"><span style="color:#88846F;">  举头望明月,低头思故乡。</span></span>
<span class="line"><span style="color:#88846F;">  */</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file-system" tabindex="-1"><a class="header-anchor" href="#file-system" aria-hidden="true">#</a> File System</h2><p>fs 是node.js 内置的 可以对文件进行操作的模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> fs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;fs&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 读取文件</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">readFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/input.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;utf8&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;error&#39;</span><span style="color:#F8F8F2;">, err)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data) </span><span style="color:#88846F;">// &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 打开文件</span></span>
<span class="line"><span style="color:#88846F;">// r: 读取模式打开文件</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/input.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;r&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data) </span><span style="color:#88846F;">// hello world</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// w:以写入模式打开文件,没有的话就创建</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/poem.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;w&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------ 获取文件信息 -------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">stat</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/input.txt&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">stats</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(stats.</span><span style="color:#A6E22E;">isFile</span><span style="color:#F8F8F2;">(), stats.</span><span style="color:#A6E22E;">isDirectory</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// true false</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// --------- 写入文件 -------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/input.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;我是通过fs写入的内容&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;write-error&#39;</span><span style="color:#F8F8F2;">, err)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;写入成功&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// ------ 追加写入内容 -------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/input.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;hello, 我是追加的内容&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  encoding: </span><span style="color:#E6DB74;">&#39;utf8&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  flag: </span><span style="color:#E6DB74;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;追加成功&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;write-error&#39;</span><span style="color:#F8F8F2;">, err)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// --------- 删除文件 --------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">unlink</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/poem1.txt&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;delete success&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// --- 创建目录 ------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">mkdir</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./src/views&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;create directory success&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------ 读取目录 ------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">readdir</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./src/&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    data.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">file</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;file&#39;</span><span style="color:#F8F8F2;">, file) </span><span style="color:#88846F;">// file views/components</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------ 检测文件路径是否存在 ------</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">exists</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/hello.txt&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err)  </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">exists</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/input.txt&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err)  </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块系统" tabindex="-1"><a class="header-anchor" href="#模块系统" aria-hidden="true">#</a> 模块系统</h2><p>Node.js提供了一个模块系统，一个文件就是一个模块。通过require引入模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// math.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increase</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">decrease</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;">.increase </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> increase</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;">.decrease </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> decrease</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> math </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./math.js&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(math.</span><span style="color:#A6E22E;">decrease</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// -2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(math.</span><span style="color:#A6E22E;">increase</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// 4</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 或者通过module.exports 导出</span></span>
<span class="line"><span style="color:#88846F;">// math.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  increase,</span></span>
<span class="line"><span style="color:#F8F8F2;">  decrease</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { increase, decrease } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./math.js&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">increase</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">decrease</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>exports是module.exports的一个引用。如果对外暴露属性或者方法, 用exports就行, 如果要对外导出对象,使用module.exports。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 在node.js中引入 esm 导出的文件()</span></span>
<span class="line"><span style="color:#88846F;">// math.mjs</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increase</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">decrease</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  increase,</span></span>
<span class="line"><span style="color:#F8F8F2;">  decrease</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// index.mjs</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { decrease, increase } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./math.mjs&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">decrease</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// -2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">increase</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h2><p>Stream 是一个抽象接口。Node.js中有四种流类型:</p><ol><li>Readable - 可读流</li><li>Writable - 可写流</li><li>Duplex - 可读可写操作</li><li>Transform - 操作被写入数据,然后读出结果</li></ol><p>所有Stream对象都是EventEmitter的实例, 常用的事件有:</p><ol><li>data - 数据可读时触发</li><li>end - 没有更多数据可读时触发</li><li>error - 接收和写入发生错误时触发</li><li>finish - 所有数据都已被写入到底层系统时触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 创建可读流</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> fs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;fs&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> readStream </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./input.txt&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> chunks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">readStream.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  chunks.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(chunk)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">readStream.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Buffer.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(chunks).</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 写入流</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> writeStream </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./output.txt&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">writeStream.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">writeStream.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 追加写入内容</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#A6E22E;">appendFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/output.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;我是追加的内容&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(err) console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;error&#39;</span><span style="color:#F8F8F2;">, err)</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;追加成功&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 也可以通过设置 flags 设置可写流为追加</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> writeStream </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./output.txt&#39;</span><span style="color:#F8F8F2;">, { flags: </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ------- 管道流 --------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> pipeReadStream </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/iu.webp&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">pipeReadStream.</span><span style="color:#A6E22E;">pipe</span><span style="color:#F8F8F2;">(fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/pipe.webp&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">pipeReadStream.</span><span style="color:#A6E22E;">pipe</span><span style="color:#F8F8F2;">(zlib.</span><span style="color:#A6E22E;">createGzip</span><span style="color:#F8F8F2;">()).</span><span style="color:#A6E22E;">pipe</span><span style="color:#F8F8F2;">(fs.</span><span style="color:#A6E22E;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./data/pipe.webp.gz&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h2><p>Node.js提供了http模块,用于搭建http服务端。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;http&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.statusCode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">200</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/plain&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello World</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">!&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">server.</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createserver" tabindex="-1"><a class="header-anchor" href="#createserver" aria-hidden="true">#</a> createServer</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;http&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Create a local server to receive data from</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, { </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;application/json&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">    data: </span><span style="color:#E6DB74;">&#39;Hello World!&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }));</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">server.</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">8000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setheader" tabindex="-1"><a class="header-anchor" href="#setheader" aria-hidden="true">#</a> setHeader</h3><p>response.setHeader(name, value)</p><p>Sets a single header value for implicit headers. If this header already in the to-be-sent headers, its value will be replaced.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">response.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/plain&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">response.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/html&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// 重复设置一个属性, 后面的值会覆盖前面</span></span>
<span class="line"><span style="color:#F8F8F2;">response.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Set-Cookit&#39;</span><span style="color:#F8F8F2;">, [</span><span style="color:#E6DB74;">&#39;language=javascript&#39;</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 防止中文乱码</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/plain;charset=utf-8&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;你好世界&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// Returns content-type = text/plain</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/html&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;X-Foo&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, { </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/plain&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;ok&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> method</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 解析post请求的参数</span></span>
<span class="line"><span style="color:#F8F8F2;">http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (req.url </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;/api/login&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    req.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      data </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chunk</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    req.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, data)</span></span>
<span class="line"><span style="color:#F8F8F2;">      res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;success&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> req.path</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> host </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> req.host;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> protocol </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> req.protocol;</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;app starting at port 3000&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h3><p>response.end(data, encoding, callback)</p><p>data: string | buffer encoding: string callback: function</p><p>This message signals to the server that all of the response headers and body have been sent; that server consider this message complete.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#A6E22E;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;你好世界&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/plain;charset=utf-8&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;app start listening....&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getheader" tabindex="-1"><a class="header-anchor" href="#getheader" aria-hidden="true">#</a> getHeader</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;text/plain;charset=utf-8&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">setHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Set-Cookie&#39;</span><span style="color:#F8F8F2;">, [</span><span style="color:#E6DB74;">&#39;language=javascript,location=hangzhou&#39;</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> contentType </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> res.</span><span style="color:#A6E22E;">getHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;content-type&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> cookie </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> res.</span><span style="color:#A6E22E;">getHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;set-cookit&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(contentType, cookie)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// text/plain;charset=utf-8</span></span>
<span class="line"><span style="color:#88846F;">// [ &#39;language=javascript,location=hangzhou&#39; ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="statuscode-statusmessage" tabindex="-1"><a class="header-anchor" href="#statuscode-statusmessage" aria-hidden="true">#</a> statusCode / statusMessage</h3><p>this property controls the status code that will be sent to the client when the headers get flushed.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">response.statusCode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">404</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// (default: 200)</span></span>
<span class="line"><span style="color:#F8F8F2;">response.statusMessage </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;success&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="writehead" tabindex="-1"><a class="header-anchor" href="#writehead" aria-hidden="true">#</a> writeHead</h3><p>Sends a response header to the request.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">response.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(statusCode, [statusMessage], [headers])</span></span>
<span class="line"><span style="color:#88846F;">// response.writeHead() 只能调用一次, 一次可以设置多个响应头</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">res.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;success&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/html&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Set-Cookie&#39;</span><span style="color:#F8F8F2;">: [</span><span style="color:#E6DB74;">&#39;language=css&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> body </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">response.</span><span style="color:#A6E22E;">writeHead</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Content-Length&#39;</span><span style="color:#F8F8F2;">: Buffer.</span><span style="color:#A6E22E;">byteLength</span><span style="color:#F8F8F2;">(body),</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;text/plain&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">(body)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method must only be called once on a message and it must be called before response.end() is called.</p><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h2><p>path模块提供了一些工具函数, 用于处理文件与目录的路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;path&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(__dirname)    </span><span style="color:#88846F;">// 当前工作目录名</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(__filename)   </span><span style="color:#88846F;">// 当前文件名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// path.join() 使用平台特定的分隔符把全部给定的path片段连在一起。并规范化生成的路径。</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;baz/asdf&#39;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;">// foo/bar/baz/asdf</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bar&#39;</span><span style="color:#F8F8F2;">))              </span><span style="color:#88846F;">// foo/bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// path.parse() 方法返回一个对象, 对象的属性表示path的元素。</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(__dirname)))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  root: &#39;/&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  dir: &#39;/Users/jinkang/Desktop/javascript-study-notes/Node&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  base: &#39;global&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  ext: &#39;&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  name: &#39;global&#39;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(__dirname)))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  root: &#39;/&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  dir: &#39;/Users/jinkang/Desktop/javascript-study-notes/Node&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  base: &#39;global&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  ext: &#39;&#39;,</span></span>
<span class="line"><span style="color:#88846F;">  name: &#39;global&#39;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// path.resolve() 把一个路径或路径片段的序列解析为一个绝对路径。</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/foo/bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;baz&#39;</span><span style="color:#F8F8F2;">)    </span><span style="color:#88846F;">// /foo/bar/baz</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/foo/bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;./baz&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;">// /foo/bar/baz</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/foo/bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;/baz&#39;</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;">// /baz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/foo/bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;./baz&#39;</span><span style="color:#F8F8F2;">)        </span><span style="color:#88846F;">// /foo/bar/baz</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/foo/bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;baz&#39;</span><span style="color:#F8F8F2;">)          </span><span style="color:#88846F;">// /foo/bar/baz</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/foo/bar&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;/baz&#39;</span><span style="color:#F8F8F2;">)         </span><span style="color:#88846F;">// /foo/bar/baz</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ----- path.isAbsolute() 判断path是否为一个绝对路径 ------</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">isAbsolute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo/bar/baz&#39;</span><span style="color:#F8F8F2;">)        </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">isAbsolute</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./foo/bar/baz&#39;</span><span style="color:#F8F8F2;">)      </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ---- 返回path的扩展名, 从path的最后一部分中最后一个. 字符到字符串结束 ------</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">extname</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;index.html&#39;</span><span style="color:#F8F8F2;">)            </span><span style="color:#88846F;">// html</span></span>
<span class="line"><span style="color:#F8F8F2;">path.</span><span style="color:#A6E22E;">extname</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;index.md&#39;</span><span style="color:#F8F8F2;">)              </span><span style="color:#88846F;">// md</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h2><p>npm 是一个随nodejs安装的包管理工具。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 常用命令</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">//查看版本</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 安装某个包(本地安装)</span></span>
<span class="line"><span style="color:#F8F8F2;">npm install express</span></span>
<span class="line"><span style="color:#88846F;">// 全局安装</span></span>
<span class="line"><span style="color:#F8F8F2;">npm install express </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 查看本地全局安装的模块</span></span>
<span class="line"><span style="color:#F8F8F2;">npm list </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">g</span></span>
<span class="line"><span style="color:#88846F;">// 查看本地安装的模块</span></span>
<span class="line"><span style="color:#F8F8F2;">npm list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 卸载</span></span>
<span class="line"><span style="color:#F8F8F2;">npm uninstall express</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 更新</span></span>
<span class="line"><span style="color:#F8F8F2;">npm update express</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h2><p>package.json文件必须有 &quot;name&quot; 和 &quot;version&quot; 字段。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// package.json属性说明</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;node-cli&quot;</span><span style="color:#F8F8F2;">,  </span><span style="color:#88846F;">// 包名</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;version&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1.0</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,     </span><span style="color:#88846F;">// 版本号</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;description&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;hello world&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 描述</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;homepage&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;http://www.xxx.com&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 包的官网url</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&quot;main&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;./index.js&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 程序的主入口文件</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 创建一个默认的package.json文件</span></span>
<span class="line"><span style="color:#F8F8F2;">npm init </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">yes</span></span>
<span class="line"><span style="color:#F8F8F2;">npm init </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> process</h2><p>The process object provides information about and control over the current Node.js process. The process object is an instance of EventEmitter.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">process.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;beforeExit&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">code</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;process before Exit event with code&#39;</span><span style="color:#F8F8F2;">, code)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">process.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;exit&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">code</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;process exit event with code&#39;</span><span style="color:#F8F8F2;">, code)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/**</span></span>
<span class="line"><span style="color:#88846F;"> * hello world</span></span>
<span class="line"><span style="color:#88846F;"> * process before Exit event with code 0</span></span>
<span class="line"><span style="color:#88846F;"> * process exit event with code 0</span></span>
<span class="line"><span style="color:#88846F;"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),i={href:"https://nodejs.org/api/process.html",target:"_blank",rel:"noopener noreferrer"},y=n(`<ol><li>process.argv</li></ol><p>process.argv 返回一个数组包含命令行参数(return an array containing the command-line arguments passed then the Node.js process was launched.)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">node</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">cli </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">version</span></span>
<span class="line"><span style="color:#88846F;">// [ &#39;/usr/local/bin/node&#39;, &#39;/usr/local/bin/node-cli&#39;, &#39;--version&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/**</span></span>
<span class="line"><span style="color:#88846F;">* first element is the process.execPath</span></span>
<span class="line"><span style="color:#88846F;">* second element is the path to the JavaScript file being executed.</span></span>
<span class="line"><span style="color:#88846F;">* the remaining elements will be any additional command-line arguments</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 一个简单的demo</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> argument </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> process.argv[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;">(argument) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;--version&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;版本号&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;--help&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;帮助&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { program } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;commander&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">program.</span><span style="color:#A6E22E;">option</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;-f --frameword &lt;frameword&gt;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;选择一个框架&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">program.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(process.argv)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),d={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},v=n(`<ol start="2"><li>process.nextTick(fn)</li></ol><p>process.nextTick() adds callback to the &#39;next tick queue&#39;.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;start&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;setTimeout-1&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">},</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;promise-1&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">process.</span><span style="color:#A6E22E;">nextTick</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;process&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;setTimeout-2&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">},</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;promise-2&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;end&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">1. start</span></span>
<span class="line"><span style="color:#88846F;">2. end</span></span>
<span class="line"><span style="color:#88846F;">3. process</span></span>
<span class="line"><span style="color:#88846F;">4. promise-1</span></span>
<span class="line"><span style="color:#88846F;">5. promise-2</span></span>
<span class="line"><span style="color:#88846F;">6. setTimeout-1</span></span>
<span class="line"><span style="color:#88846F;">7. setTimeout-2</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function u(m,E){const a=o("ExternalLinkIcon");return c(),F("div",null,[t,s("p",null,[s("a",i,[l("Node.js官网-Process"),e(a)])]),y,s("p",null,[s("a",d,[l("commander"),e(a)])]),v])}const f=p(r,[["render",u],["__file","node.html.vue"]]);export{f as default};
