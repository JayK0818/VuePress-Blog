import{_ as p}from"./framework-c27b6911.js";import{r as o,o as c,c as t,d as s,e as a,a as l,b as e}from"./app-ec006255.js";const F={},r=e(`<h1 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h1><h2 id="对象初始化" tabindex="-1"><a class="header-anchor" href="#对象初始化" aria-hidden="true">#</a> 对象初始化</h2><p>可以通过new Object() / Object.create()方法，或者使用字面量标记 初始化对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Object</span><span style="color:#F8F8F2;">({})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-seal" tabindex="-1"><a class="header-anchor" href="#object-seal" aria-hidden="true">#</a> Object.seal</h2><p>Object.seal()方法封闭一个对象,阻止添加新属性并将现在所有属性标记为不可配置。当前属性的值 只要原来是可写的就可以改变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> kyrie </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">seal</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;irving&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// ----- 无法添加新的属性 -----</span></span>
<span class="line"><span style="color:#F8F8F2;">kyrie.age </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">30</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(kyrie)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">kyrie:  {firstName: &#39;kyrie&#39;, lastName: &#39;irving&#39;}</span></span>
<span class="line"><span style="color:#88846F;">irving: {firstName: &#39;kyrie&#39;, lastName: &#39;irving&#39;, age: 30}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getOwnPropertyDescriptors</span><span style="color:#F8F8F2;">(kyrie))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  firstName: {</span></span>
<span class="line"><span style="color:#88846F;">    configurable: false</span></span>
<span class="line"><span style="color:#88846F;">    enumerable: true</span></span>
<span class="line"><span style="color:#88846F;">    value: &quot;kyrie&quot;</span></span>
<span class="line"><span style="color:#88846F;">    writable: true</span></span>
<span class="line"><span style="color:#88846F;">  }</span></span>
<span class="line"><span style="color:#88846F;">  lastName: {</span></span>
<span class="line"><span style="color:#88846F;">    configurable: false</span></span>
<span class="line"><span style="color:#88846F;">    enumerable: true</span></span>
<span class="line"><span style="color:#88846F;">    value: &quot;irving&quot;</span></span>
<span class="line"><span style="color:#88846F;">    writable: true</span></span>
<span class="line"><span style="color:#88846F;">  }</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"><span style="color:#88846F;">// 无法删除属性</span></span>
<span class="line"><span style="color:#F92672;">delete</span><span style="color:#F8F8F2;"> kyrie.firstName</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(kyrie) </span><span style="color:#88846F;">/* {firstName: &#39;kyrie&#39;, lastName: &#39;irving&#39;} */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 之前的属性可以修改</span></span>
<span class="line"><span style="color:#F8F8F2;">kyrie.firstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Kyrie&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">kyrie.lastName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Irving&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(kyrie)  </span><span style="color:#88846F;">// {firstName: &#39;Kyrie&#39;, lastName: &#39;Irving&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Cannot define property age, object is not extensible</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(kyrie, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value: </span><span style="color:#AE81FF;">30</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> lebron </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(lebron, </span><span style="color:#E6DB74;">&#39;firstName&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  writable: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(lebron, </span><span style="color:#E6DB74;">&#39;lastName&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value: </span><span style="color:#E6DB74;">&#39;james&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  writable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">seal</span><span style="color:#F8F8F2;">(lebron)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">lebron.firstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Lebron&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">lebron.lastName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;James&#39;</span></span>
<span class="line"><span style="color:#88846F;">// 因为 firstName 原来是不可写的</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(lebron) </span><span style="color:#88846F;">// {firstName: &#39;lebron&#39;, lastName: &#39;James&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-freeze" tabindex="-1"><a class="header-anchor" href="#object-freeze" aria-hidden="true">#</a> Object.freeze</h2><p>Object.freeze()可以冻结一个对象。一个被冻结的对象再也不能被修改。不能添加新的属性,不能删除已有属性。不能修改 对象已有属性的可枚举性,可配置性,可写性以及不能修改已有属性的值。 此外,冻结一个对象后该对象的原型也不能修改。 freeze()返回和传入的参数相同的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">freeze</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  lastName: </span><span style="color:#E6DB74;">&#39;james&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    last_year: </span><span style="color:#AE81FF;">37</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    this_year: </span><span style="color:#AE81FF;">38</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">player.firstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lebron&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">player.age </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">38</span></span>
<span class="line"><span style="color:#F92672;">delete</span><span style="color:#F8F8F2;"> player.lastName</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player)   </span><span style="color:#88846F;">// {firstName: &#39;lebron&#39;, lastName: &#39;james&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(player, </span><span style="color:#E6DB74;">&#39;firstName&#39;</span><span style="color:#F8F8F2;">, {  </span><span style="color:#88846F;">// Cannot redefine property: firstName</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  writable: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  value: </span><span style="color:#E6DB74;">&#39;Lebron&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 如果一个属性值是对象, 则这个对象中的属性是可以修改的</span></span>
<span class="line"><span style="color:#F8F8F2;">player.age.last_year </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">38</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">player.age.this_year </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">39</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(player)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  age: {</span></span>
<span class="line"><span style="color:#88846F;">    last_year: 38,</span></span>
<span class="line"><span style="color:#88846F;">    this_year: 39</span></span>
<span class="line"><span style="color:#88846F;">  },</span></span>
<span class="line"><span style="color:#88846F;">  firstName: &quot;lebron&quot;</span></span>
<span class="line"><span style="color:#88846F;">  lastName: &quot;james&quot;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="object-isextensible" tabindex="-1"><a class="header-anchor" href="#object-isextensible" aria-hidden="true">#</a> Object.isExtensible</h2><p>判断一个对象是否是可扩展的( 是否可以在 上面添加 <strong>新</strong> 的属性 ), 返回一个布尔值.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object_1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">  player:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object_2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">({}, </span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">,{ </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">  value:</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">({}, </span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, { </span><span style="color:#88846F;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">  value:</span><span style="color:#E6DB74;">&#39;lebron&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable:</span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object_4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">freeze</span><span style="color:#F8F8F2;">({player:</span><span style="color:#E6DB74;">&#39;durant&#39;</span><span style="color:#F8F8F2;">}) </span><span style="color:#88846F;">// false</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object_5 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">seal</span><span style="color:#F8F8F2;">({player:</span><span style="color:#E6DB74;">&#39;curry&#39;</span><span style="color:#F8F8F2;">})  </span><span style="color:#88846F;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在 ES5 中,如果参数不是一个对象类型,将抛出一个 TypeError 异常。在 ES6 中, non-object 参数将被视为一个不可扩展的普通对象,因此会返回 false。</p></div><h2 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h2><p>toString() 方法返回一个表示该对象的字符串。</p><p>可以通过使用toString() 方法来获取每个对象的类型。返回内部属性[[Class]]的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> toString </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString</span></span>
<span class="line"><span style="color:#F8F8F2;">toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">()); </span><span style="color:#88846F;">// [object Date]</span></span>
<span class="line"><span style="color:#F8F8F2;">toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">String</span><span style="color:#F8F8F2;">()); </span><span style="color:#88846F;">// [object String]</span></span>
<span class="line"><span style="color:#F8F8F2;">toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(Math); </span><span style="color:#88846F;">// [object Math]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">//Since JavaScript 1.8.5</span></span>
<span class="line"><span style="color:#F8F8F2;">toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// [object Undefined]</span></span>
<span class="line"><span style="color:#F8F8F2;">toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// [object Null]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbol.toStringTag 是一个内置的symbol, 它通常作为对象的属性键使用, 对应的属性值应该为字符串类型。这个字符串用来表示该对象的 自定义类型标签。通常只有内置的Object.prototype.toString() 方法会读取这个标签</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.toStringTag]: </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(obj))  </span><span style="color:#88846F;">// [object world]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-setprototypeof" tabindex="-1"><a class="header-anchor" href="#object-setprototypeof" aria-hidden="true">#</a> Object.setPrototypeOf</h2><p>Object.setPrototypeOf() 方法设置一个指定的对象的圆形到另一个对象或 null</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">setPrototypeOf</span><span style="color:#F8F8F2;">(object, prototype)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果prototype参数是 数字 字符串 布尔值 或者undefined等, 则什么都不做, 否则该方法将object的[[Prototype]] 修改为新的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">setPrototypeOf</span><span style="color:#F8F8F2;">(a, b)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">())  </span><span style="color:#88846F;">// hello</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(a) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> b) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> z </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { a: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">z.__proto__.c </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;z&#39;</span><span style="color:#F8F8F2;">, z) </span><span style="color:#88846F;">// {a: 3, b: 4}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">m} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> z;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(m)  </span><span style="color:#88846F;">// {a: 3, b: 4}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { a, b, c } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> z;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a, b, c)  </span><span style="color:#88846F;">// 3 4 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">setPrototypeOf</span><span style="color:#F8F8F2;">(object, prototype) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(object.__proto__) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    object.__proto__ </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prototype</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Fn</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> object) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, key, {</span></span>
<span class="line"><span style="color:#F8F8F2;">          value: obj[key]</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">Fn</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prototype</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Fn</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-getprototypeof" tabindex="-1"><a class="header-anchor" href="#object-getprototypeof" aria-hidden="true">#</a> Object.getPrototypeOf</h2><p>Object.getPrototypeOf 方法返回指定对象的原型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(obj)) </span><span style="color:#88846F;">// null</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">firstName</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">lastName</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.firstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> firstName;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.lastName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lastName;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Player</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;irving&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">object.__proto__ </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> player;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(object))  </span><span style="color:#88846F;">// Player{ firstName: &quot;kyrie&quot;, lastName: &quot;irving&quot;}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(Object))    </span><span style="color:#88846F;">// ƒ () { [native code] }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(Function))  </span><span style="color:#88846F;">// f () { [native code] }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getPrototypeOf</span><span style="color:#F8F8F2;">(Object) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Function</span><span style="color:#F8F8F2;">.prototype) </span><span style="color:#88846F;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-prototype-valueof" tabindex="-1"><a class="header-anchor" href="#object-prototype-valueof" aria-hidden="true">#</a> Object.prototype.valueOf</h2><p>valueOf() 方法返回指定对象的原始值。 默认情况下, valueOf()方法由 Object后面的每个对象继承, 每个内置的核心对象都会覆盖此方法以返回适当的值。如果对象没有原始值,则 valueOf将返回本身。</p><table><thead><tr><th>对象</th><th>返回值</th></tr></thead><tbody><tr><td>Array</td><td>返回数组对象本身</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Date</td><td>自1970年1月1日 午夜开始计的毫秒数</td></tr><tr><td>Function</td><td>函数本身</td></tr><tr><td>Number</td><td>数字值</td></tr><tr><td>Object</td><td>对象本身</td></tr><tr><td>String</td><td>字符串值</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], boolean </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> date </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">123</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> string </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;123&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {msg: </span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(array.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(), array.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> array) </span><span style="color:#88846F;">// [1, 2, 3]  true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(boolean.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(), boolean.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> boolean) </span><span style="color:#88846F;">// false true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(date.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">()) </span><span style="color:#88846F;">// 1656855031156</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(fn.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(), fn.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> fn)  </span><span style="color:#88846F;">// ƒ () {} true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(number.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(), number.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> number)  </span><span style="color:#88846F;">// 123 true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(string.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(), string.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> string)  </span><span style="color:#88846F;">// 123 true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(object.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">(), object.</span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> object)  </span><span style="color:#88846F;">// {msg: &#39;hello world&#39;} true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> objA </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {property: </span><span style="color:#E6DB74;">&#39;ObjectA&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> objB </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {property: </span><span style="color:#E6DB74;">&#39;ObjectB&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> o </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [objA]: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [objB]: </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(o)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  [object Object]: &quot;world&quot;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> objA </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {property: </span><span style="color:#E6DB74;">&#39;ObjectA&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#A6E22E;">valueOf</span><span style="color:#F8F8F2;">() {</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">}}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> objB </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {property: </span><span style="color:#E6DB74;">&#39;ObjectB&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">() {</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> o </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [objA]: </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [objB]: </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(o)</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">[object Object]: &quot;hello&quot;</span></span>
<span class="line"><span style="color:#88846F;">world: &quot;world&quot;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的属性" tabindex="-1"><a class="header-anchor" href="#对象的属性" aria-hidden="true">#</a> 对象的属性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 常规属性</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">a.b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">a.a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">a.d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">a.c </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;世界&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> a) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key)  </span><span style="color:#88846F;">// b a d c</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(a)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key)  </span><span style="color:#88846F;">// b a d c</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 排序属性, 遍历时按照索引升序</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> c </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">c[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">c[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">c[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">c[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;世界&#39;</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(c)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(key) </span><span style="color:#88846F;">// 0 1 2 3</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 如果对象属性是字符串数字, 依然按照顺序输出</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;0&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;3&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;2&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;世界&#39;</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(d)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;d-key&#39;</span><span style="color:#F8F8F2;">, key) </span><span style="color:#88846F;">// 0 1 2 3</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 如果排序属性和常规属性都有的话</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  a: </span><span style="color:#E6DB74;">&#39;h&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  c: </span><span style="color:#E6DB74;">&#39;e&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  b: </span><span style="color:#E6DB74;">&#39;l&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;l&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;w&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(e)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;e-key&#39;</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 0 1 2 a c b</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象拥有两个隐藏属性 elements 和 properties, 数字属性会被放到elements属性中,被称为排序属性。在elements对象中,会按照属性值数字大小排序。 字符串属性被称为常规属性, 在properties中会按照创建属性的先后顺序保存。</p><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><table><thead><tr><th>方法名</th><th>普通属性</th><th>不可枚举属性</th><th>Symbol属性</th><th>原型属性</th></tr></thead><tbody><tr><td>for...in</td><td>👌</td><td>❌</td><td>❌</td><td>👌</td></tr><tr><td>Object.getOwnPropertyNames</td><td>👌</td><td>👌</td><td>❌</td><td>❌</td></tr><tr><td>Object.getOwnPropertySymbols</td><td>❌</td><td>👌</td><td>👌</td><td>❌</td></tr><tr><td>Object.keys</td><td>👌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Reflect.ownKeys</td><td>👌</td><td>👌</td><td>👌</td><td>❌</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 遍历object的属性(普通属性/不可枚举属性/原型属性/Symbol属性/静态属性)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> object </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  firstName: </span><span style="color:#E6DB74;">&#39;kyrie&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;lastName&#39;</span><span style="color:#F8F8F2;">)]: </span><span style="color:#E6DB74;">&#39;irving&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(object, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  writable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">object.__proto__.skill </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;crossover&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, object)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> object) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;for---in&#39;</span><span style="color:#F8F8F2;">, key)  </span><span style="color:#88846F;">// firstName, skill (原型和普通属性)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">(object)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Object.key---&#39;</span><span style="color:#F8F8F2;">, key) </span><span style="color:#88846F;">// firstName (普通属性)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getOwnPropertyNames</span><span style="color:#F8F8F2;">(object)) </span><span style="color:#88846F;">// [&#39;firstName&#39;, &#39;age&#39;] (普通属性和不可枚举属性)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Object.</span><span style="color:#A6E22E;">getOwnPropertySymbols</span><span style="color:#F8F8F2;">(object)) </span><span style="color:#88846F;">// [Symbol(lastName)] (Symbol属性)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(Reflect.</span><span style="color:#A6E22E;">ownKeys</span><span style="color:#F8F8F2;">(object))  </span></span>
<span class="line"><span style="color:#88846F;">//[&#39;firstName&#39;, &#39;lastName&#39;, &#39;age&#39;, Symbol(fullName)] (普通属性/不可枚举属性/Symbol属性)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function v(b,u){const n=o("ExternalLinkIcon");return c(),t("div",null,[r,s("p",null,[s("a",i,[a("Object.isExtensible"),l(n)])]),s("p",null,[s("a",y,[a("Object.freeze()"),l(n)])]),d])}const f=p(F,[["render",v],["__file","object.html.vue"]]);export{f as default};
