import{_ as s}from"./framework-c27b6911.js";import{o as n,c as a,b as l}from"./app-ec006255.js";const e={},o=l(`<h1 id="redux-toolkit" tabindex="-1"><a class="header-anchor" href="#redux-toolkit" aria-hidden="true">#</a> Redux ToolKit</h1><p>redux toolkit 是官方推荐的编写redux逻辑的工具。包含了redux的核心代码.可以用来更好的创建reducer和store.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// install</span></span>
<span class="line"><span style="color:#F8F8F2;">npm install @reduxjs</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">toolkit react</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">redux</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="createslice" tabindex="-1"><a class="header-anchor" href="#createslice" aria-hidden="true">#</a> createSlice</h2><p>creating a slice requires a string name to identify the slice, and initial state value, and one or more reducer functions to define how the state can be updated.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 一个计数器案例</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createSlice } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@reduxjs/toolkit&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> COUNTER_KEY </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;counter&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> counter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createSlice</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: COUNTER_KEY,  </span><span style="color:#88846F;">//作为action type 的前缀</span></span>
<span class="line"><span style="color:#F8F8F2;">  initialState: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducers: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">: </span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;">: </span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// increment和decrement接受的第二个参数是 一个对象, 包含type和payload字段(就是action creator生成的对象一样)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">creator</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// creator {type: &#39;counter/increment&#39;, payload: undefined}</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#88846F;">// 创建好reducer之后 到处action creators和reducer,推荐使用ES6的解构语法</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> { increment, decrement } = counter.actions</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> counter.reducer</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createSlice会自动生成 action types 和 action creators. 根据传递给createSlice的name属性和函数名称 上述计数器的例子, type 分别是 counter/increment, counter/decrement。</p><p>如果需要自定义生成的数据, 可以给对应的reducer传递一个对象, 该对象接受两个参数, 一个reducer 和 一个prepare函数。 prepare返回一个对象,该对象下的payload属性即为 最后自定义生成的内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todoSlice </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createSlice</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;todos&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  initialState: [],</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducers: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    add_todo: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">reducer</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ([</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">state, action.payload]),</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">prepare</span><span style="color:#F8F8F2;">: </span><span style="color:#FD971F;font-style:italic;">text</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({</span></span>
<span class="line"><span style="color:#F8F8F2;">        payload: {</span></span>
<span class="line"><span style="color:#F8F8F2;">          text,</span></span>
<span class="line"><span style="color:#F8F8F2;">          id: </span><span style="color:#A6E22E;">nanoid</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">          completed: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createSlice() 返回一个对象, 该对象包含以下方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  name : string,</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducer : ReducerFunction,</span></span>
<span class="line"><span style="color:#F8F8F2;">  actions : Record</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">string, ActionCreator</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  caseReducers: Record</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">string, CaseReducer</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">.</span></span>
<span class="line"><span style="color:#F8F8F2;">  getInitialState: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> State</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// extraReducers</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> uppercase </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;todo/uppercase&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> lowercase </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;todo/lowercase&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">createSlice</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">extraReducers</span><span style="color:#F8F8F2;">: </span><span style="color:#FD971F;font-style:italic;">builder</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    builder.</span><span style="color:#A6E22E;">addCase</span><span style="color:#F8F8F2;">(uppercase, (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(state, action)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">todo, text: todo.text.</span><span style="color:#A6E22E;">toUpperCase</span><span style="color:#F8F8F2;">()}))</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 或者使用对象的方法</span></span>
<span class="line"><span style="color:#F8F8F2;">  extraReducers: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    [uppercase]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> (state.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">todo, text: todo.text.</span><span style="color:#A6E22E;">toUpperCase</span><span style="color:#F8F8F2;">()})))</span></span>
<span class="line"><span style="color:#F8F8F2;">    [lowercase]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> (state.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">todo, text: todo.text.</span><span style="color:#A6E22E;">toLowerCase</span><span style="color:#F8F8F2;">()})))</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configurestore" tabindex="-1"><a class="header-anchor" href="#configurestore" aria-hidden="true">#</a> configureStore</h2><p>configureStore 默认内置了一些中间件, 比如 redux-thunk, 开发环境下开启devtools</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { configureStore } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@reduxjs/toolkit&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">logger</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">next</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;logger&#39;</span><span style="color:#F8F8F2;">, action)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">next</span><span style="color:#F8F8F2;">(action)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> store </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">configureStore</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducer: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    counter: counterReducer</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">middleware</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">getDefaultMiddleware</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getDefaultMiddleware</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(logger)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  devTool: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="createasyncthunk" tabindex="-1"><a class="header-anchor" href="#createasyncthunk" aria-hidden="true">#</a> createAsyncThunk</h2><p>在configureStore中调用异步逻辑, 需要使用createAsyncThunk函数, 它接受三个参数, 第一个参数是action type, 字符串. 第二个参数是一个函数payloadCreator, 这个函数接受两个参数(payload, thunkApi), thunkApi下有一个dispatch方法, 可以在异步操作结束后 dispatch触发更新。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> increment_async </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAsyncThunk</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;counter/async_increment&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">payload</span><span style="color:#F8F8F2;">, {</span><span style="color:#FD971F;font-style:italic;">dispatch</span><span style="color:#F8F8F2;">}) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">(payload))</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>type将会生成三个 action type 变量, 在上面的案例中, counter/async_increment 将会生成：</li></ol><p><strong>counter/async_increment/pending</strong></p><p><strong>counter/async_increment/fulfilled</strong></p><p><strong>counter/async_increment/rejected</strong></p><ol start="2"><li>payloadCreator 返回一个promise,返回最终的异步操作后的结果。该函数接受两个参数：</li></ol><p>2.1 arg: a single value, containing the first parameter that was passed to the thunk action creator when it was dispatched。</p><p>2.2 thunkApi: 是一个对象,包含dispatch, getState 等redux store method.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 一个异步添加todo的例子</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createAsyncThunk } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@reduxjs/toolkit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> add_todo_async </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAsyncThunk</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;add_todo/async&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">payload</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(payload)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo_reducer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createSlice</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;todo&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  initialState: [],</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducers: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  extraReducers: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    [add_todo_async.fulfilled]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      state.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">        id: </span><span style="color:#A6E22E;">nanoid</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">        text: action.payload,</span></span>
<span class="line"><span style="color:#F8F8F2;">        completed: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>add_todo_async.pending / add_todo_async.fulfilled / add_todo_async.rejected 是一个action creator. 它们的toString()方法会返回对应的 action type.</p><h2 id="createaction" tabindex="-1"><a class="header-anchor" href="#createaction" aria-hidden="true">#</a> createAction</h2><p>一个工具函数用来定义 redux action type 和 action creator。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createAction } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@reduxjs/toolkit&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> increment </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;counter/increment&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> action </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#88846F;">// { type: &#39;counter/increment&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">action </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">// returns { type: &#39;counter/increment&#39;, payload: 3 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(increment.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#88846F;">// &#39;counter/increment&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接受一个参数的情况下, 该参数会成为返回值的 type 属性。 也可以传递第二个参数 用来定义生成的payload。该参数是一个函数, 必须返回一个对象, 对象下有一个payload属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> add_todo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;todo/add&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">text</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    payload: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      text,</span></span>
<span class="line"><span style="color:#F8F8F2;">      completed: </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">add_todo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello world&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">add_todo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;你好, 生活&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  payload: {text: &#39;hello world&#39;, completed: false}</span></span>
<span class="line"><span style="color:#88846F;">  type: &quot;todo/add&quot;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">{</span></span>
<span class="line"><span style="color:#88846F;">  payload: {text: &#39;你好, 生活&#39;, completed: false}</span></span>
<span class="line"><span style="color:#88846F;">  type: &quot;todo/add&quot;</span></span>
<span class="line"><span style="color:#88846F;">}</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="createreducer" tabindex="-1"><a class="header-anchor" href="#createreducer" aria-hidden="true">#</a> createReducer</h2><h3 id="builder-callback" tabindex="-1"><a class="header-anchor" href="#builder-callback" aria-hidden="true">#</a> Builder Callback</h3><p>在redux中书写reducer函数时, 有时需要写很多的 case 语句来为不同的action定义对应的数据更新。createReducer可以简化 此类reducer的实现.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> increment </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;counter/increment&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> decrement </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;counter/decrement&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> initial_state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> reducer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createReducer</span><span style="color:#F8F8F2;">(initial_state, (</span><span style="color:#FD971F;font-style:italic;">builder</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  builder</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#A6E22E;">addCase</span><span style="color:#F8F8F2;">(increment, (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#A6E22E;">addCase</span><span style="color:#F8F8F2;">(decrement, (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>initialState可以传递一个数值 或者一个函数, 函数返回值作为state. 比如需要读取localStorage的数据时！</p><p>builder.addCase() 行为和switch...case语句一样。 第一个参数是createAction() 生成的action creator 生成一个 action type。 第二个参数是一个reducer 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">reducer.</span><span style="color:#A6E22E;">getInitialState</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// 0  获取初始状态值。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>createReducer第二个参数也可以传递一个对象, 对象的每个键名 为createAction() 返回的对象上的type字段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> reducer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createReducer</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [increment.type]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  [decrement]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面用到了对象的计算属性, 第二种方式 会调用decrement.toString()方法, 该函数改写了toString(),返回值和直接调用decrement.type 结果是一样的, 都是 counter/decrement.</p><p>在Redux中要求reducer必须是一个纯函数,不允许直接修改参数state,但是在createReducer中 可以直接修改对象的属性提交, 而无需使用对象扩展运算符 或者 Object.assign 来返回一个新的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 在一个todo-list中, 新增todo,和 toggle。直接在原始数组push一条数据</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createAction, createReducer } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@reduxjs/toolkit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> toggle </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;todo/toggle&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> add </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createAction</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;todo/add&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo_reducer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createReducer</span><span style="color:#F8F8F2;">([], </span><span style="color:#FD971F;font-style:italic;">builder</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  builder</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#A6E22E;">addCase</span><span style="color:#F8F8F2;">(toggle, (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> action.payload</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> state[index]</span></span>
<span class="line"><span style="color:#F8F8F2;">    todo.completed </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">todo.completed</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#A6E22E;">addCase</span><span style="color:#F8F8F2;">(add, (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> action.payload</span></span>
<span class="line"><span style="color:#F8F8F2;">    state.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(todo)</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-object" tabindex="-1"><a class="header-anchor" href="#map-object" aria-hidden="true">#</a> Map Object</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 或者使用对象方式</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo_reducer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createReducer</span><span style="color:#F8F8F2;">([], {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [toggle_todo]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> state.</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> todo.id </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> action.payload)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(todo) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      todo.completed </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">todo.completed</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  [add_todo]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    state.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(action.payload)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在createReducer中,可以提交可变更新, 或者 返回一个新数据, 但是只能使用其中一种方式, 不可以在变更state状态后 再将变更后的数据返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo_reducer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createReducer</span><span style="color:#F8F8F2;">([], {</span></span>
<span class="line"><span style="color:#F8F8F2;">  [toggle_todo]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> state.</span><span style="color:#A6E22E;">findIndex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> todo.id </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> action.payload)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(index </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> state[index]</span></span>
<span class="line"><span style="color:#F8F8F2;">      todo.completed </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">todo.completed </span><span style="color:#88846F;">// 变更状态就可以了, 无需再次返回新的state, 否则会报错</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">state.</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, index), todo, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">state.</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(index</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  [add_todo]: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    state.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(action.payload)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="current" tabindex="-1"><a class="header-anchor" href="#current" aria-hidden="true">#</a> current</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="shiki monokai" style="background-color:#272822;" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createSlice, current } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@reduxjs/toolkit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> slice </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createSlice</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E6DB74;">&#39;todos&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  initialState: [{ id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, title: </span><span style="color:#E6DB74;">&#39;Example todo&#39;</span><span style="color:#F8F8F2;"> }],</span></span>
<span class="line"><span style="color:#F8F8F2;">  reducers: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">addTodo</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(state)  </span><span style="color:#88846F;">// state 是一个proxy对象, 在控制台比较难以阅读</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;before&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#A6E22E;">current</span><span style="color:#F8F8F2;">(state))</span></span>
<span class="line"><span style="color:#F8F8F2;">      state.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(action.payload)</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;after&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#A6E22E;">current</span><span style="color:#F8F8F2;">(state))</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),p=[o];function t(c,F){return n(),a("div",null,p)}const y=s(e,[["render",t],["__file","redux-toolkit.html.vue"]]);export{y as default};
