import{_ as s,o as n,c as a,e as l}from"./app.cae4c64a.js";const e={},p=l(`<h1 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux" aria-hidden="true">#</a> React Redux</h1><p>React Redux is the official Redux UI binding library for React. If you are using Redux and React together, you should also use React Redux to bind these two libraries.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can ensure that each connected component only extracts the specific pieces of data from the store state that are needed by that component. This means that you own component will need to re-render less often.</p></div><h2 id="provider" tabindex="-1"><a class="header-anchor" href="#provider" aria-hidden="true">#</a> Provider</h2><p>Once the store is created, we can make is available to our React components by putting a React Redux Provider around out application.</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// usage</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Provider } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-redux&#39;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createRoot } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-dom/client&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createRoot</span><span style="color:#F8F8F2;">(document.</span><span style="color:#A6E22E;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;root&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">root.</span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#66D9EF;font-style:italic;">App</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">store</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">store</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Provider \u7EC4\u4EF6\u4E5F\u524B\u63D0\u4F9B\u4E00\u4E2A\u53EF\u9009\u7684 context \u53C2\u6570\u3002</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ThemeContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> React.</span><span style="color:#A6E22E;">createContext</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;dark&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MyProvider</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">context</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">ThemeContext</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">store</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">store</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">props.children</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="connect" tabindex="-1"><a class="header-anchor" href="#connect" aria-hidden="true">#</a> connect</h2><p>The connect() function connects a React component to a Redux store. It does not modify the component class passed to it. instead, it returns a new, connected component class that wrap the component you passed in.</p><p>Arguments:</p><ol><li><p>mapStateToProps called every time the store state changes. It receives the entire store state, and should return an object of data this component needs</p></li><li><p>mapDispatchToProps : (functions / object) \u53C2\u6570\u53EF\u4EE5\u662F\u5BF9\u8C61 \u6216\u8005 \u51FD\u6570, \u4E00\u822C\u6765\u8BF4\u662F\u4E00\u4E2A\u51FD\u6570 \u5305\u542B\u5F53\u524D\u7EC4\u4EF6\u9700\u8981\u7684 actionCreator\u3002</p></li><li><p>mergeProps: (stateProps, dispatchProps, ownProps) =&gt; Object \u662F\u4E00\u4E2A\u53EF\u9009\u53C2\u6570, \u5B83\u51B3\u5B9A\u6700\u7EC8\u4F60\u7684\u7EC4\u4EF6\u4F1A\u63A5\u53D7\u5230\u600E\u6837\u7684props\u53C2\u6570,\u5982\u679C\u6CA1\u6709\u63D0\u4F9B\u7684\u8BDD, \u7EC4\u4EF6\u5C06\u63A5\u53D7 {...ownProps, ...stateProps, ...dispatchProps}\u3002</p></li><li><p>options: \u8FD9\u4E5F\u662F\u4E00\u4E2A\u53EF\u9009\u53C2\u6570, React-Redux v6\u5141\u8BB8\u4F20\u9012\u4E00\u4E2A\u81EA\u5B9A\u4E49\u7684context, \u9700\u8981\u5728Provider \u548C \u5F53\u524D\u7EC4\u4EF6\u4F20\u9012 context\u3002</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> MyContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> React.</span><span style="color:#A6E22E;">createContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(mapStateToProps, mapDispatchToProps, </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, { context: MyContext })(</span></span>
<span class="line"><span style="color:#F8F8F2;">  MyComponent</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// \u5C06\u4E0A\u9762\u7684\u8BA1\u6570\u5668 \u4F7F\u7528useSelector \u548C useDispatch \u901A\u8FC7connect \u65B9\u6CD5\u5B9E\u73B0</span></span>
<span class="line"><span style="color:#88846F;">// store.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({</span></span>
<span class="line"><span style="color:#F8F8F2;">  type: INCREMENT</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({</span></span>
<span class="line"><span style="color:#F8F8F2;">  type: DECREMENT</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// App.jsx</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { decrement, increment } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({count: state})</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mapDispatchToProps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  decrement,</span></span>
<span class="line"><span style="color:#F8F8F2;">  increment</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Counter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(mapStateToProps, mapDispatchToProps)((</span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">className</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;primary-button&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">props.increment</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Increment&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">span</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">props.count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">className</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;primary-button&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">props.decrement</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Decrement&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Common ways of calling connect</strong></p><ol><li><p>\u5982\u679Cconnect\u51FD\u6570\u4E24\u4E2A\u53C2\u6570\u90FD\u6CA1\u6709\u4F20\u9012, \u90A3\u4E48\u7EC4\u4EF6\u5C06\u4E0D\u4F1A\u66F4\u65B0(\u5F53store\u7684\u6570\u636E\u66F4\u65B0\u65F6)\u3002 \u7EC4\u4EF6\u4F1A\u63A5\u53D7props.dispatch</p></li><li><p>\u5982\u679C\u53EA\u4F20\u9012\u4E86mapStateToProps,\u4F46\u662F\u6CA1\u6709\u4F20\u9012mapDispatchToProps, \u7EC4\u4EF6\u4F1A\u5728store\u6570\u636E\u66F4\u65B0\u65F6\u66F4\u65B0, \u5E76\u63A5\u53D7props.dispatch\u3002</p></li><li><p>\u5982\u679C\u53EA\u4F20\u9012\u4E86mapDispatchToProps,\u4F46\u662F\u6CA1\u6709\u4F20\u9012mapStateToProps, \u7EC4\u4EF6\u5728store\u6570\u636E\u66F4\u65B0\u65F6\u4E0D\u4F1A\u66F4\u65B0, \u5E76\u63A5\u53D7action\u751F\u6210\u5668(\u4F20\u9012\u7ED9mapDispatchToProps\u91CC\u7684\u51FD\u6570)</p></li><li><p>\u4E24\u4E2A\u53C2\u6570mapDispatchToProps \u548C mapStateToProps\u90FD\u4F20\u9012\u4E86,\u90A3\u4E48\u7EC4\u4EF6\u4F1A\u6B63\u5E38\u66F4\u65B0\u5E76\u4E14\u63A5\u53D7action\u751F\u6210\u5668\u3002</p></li></ol><table><thead><tr><th></th><th style="text-align:center;">Do Not Subscribe to the Store</th><th style="text-align:center;">Subscribe to the Store</th></tr></thead><tbody><tr><td>Do Not Inject Action Creators</td><td style="text-align:center;">connect()(Component)</td><td style="text-align:center;">connect(mapStateToProps)(Component)</td></tr><tr><td>Inject Action Creators</td><td style="text-align:center;">connect(null, mapDispatchToProps)(Component)</td><td style="text-align:center;">connect(mapStateToProps, mapDispatchToProps)(Component)</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u53EA\u8981\u7B2C\u4E00\u4E2A\u53C2\u6570mapStateToProps\u6CA1\u6709\u4F20\u9012, \u90A3\u4E48\u5F53store\u4E2D\u7684\u6570\u636E\u66F4\u65B0\u65F6,\u5F53\u524D\u7EC4\u4EF6\u4E0D\u4F1A\u89E6\u53D1\u91CD\u65B0\u6E32\u67D3\u3002</p></div><h2 id="mapstatetoprops" tabindex="-1"><a class="header-anchor" href="#mapstatetoprops" aria-hidden="true">#</a> mapStateToProps</h2><p>mapStateToProps Functions Should Be Pure and Synchronous</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ownProps</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mapStateToProps \u4F5C\u4E3A\u7B2C\u4E00\u4E2A\u53C2\u6570\u4F20\u9012\u7ED9connect\u51FD\u6570, \u5982\u679Cstore\u7684\u6570\u636E\u66F4\u65B0\u4E86, \u90A3\u4E48mapStateToProps\u51FD\u6570\u4FBF\u4F1A\u6267\u884C\u3002 \u5982\u679C\u4E0D\u60F3\u8BA2\u9605store\u7684\u6570\u636E\u66F4\u65B0, \u53EF\u4EE5\u663E\u5F0F\u5730\u7ED9connect\u4F20\u9012 null \u6216\u8005 undefined.</p><ol><li>Arguments</li></ol><p>mapStateToProps\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570 \u662F\u5B8C\u6574\u7684 Redux store state(\u503C\u548C store.getState()\u8FD4\u56DE\u7684\u4E00\u6837\u3002)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { todoList: todos.todos }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(mapStateToProps)(TodoList)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E5F\u53EF\u4EE5\u7ED9mapStateToProps \u4F20\u9012\u7B2C\u4E8C\u4E2A\u53EF\u9009\u7684\u53C2\u6570ownProps\u3002\u5F53\u524D\u7EC4\u4EF6\u63A5\u53D7\u7684props. (This argument will contain all of the props given to the wrapper component that was generated by connect)</p><ol start="2"><li>Return</li></ol><p>mapStateToProps\u7684\u8FD4\u56DE\u503C \u5E94\u8BE5\u662F\u4E00\u4E2A\u7EAF\u5BF9\u8C61\u91CC\u9762\u5305\u542B\u5F53\u524D\u7EC4\u4EF6\u9700\u8981\u7684\u6570\u636E, \u8BE5\u5BF9\u8C61\u7684\u6BCF\u4E2A\u5B57\u6BB5\u5C06\u6700\u4F5C\u4E3Aprops\u4F20\u9012\u5230\u5F53\u524D\u7EC4\u4EF6 \u3002 \u5982\u679C\u8FD4\u56DE\u7684\u5BF9\u8C61 \u4EFB\u4F55\u4E00\u4E2A\u5B57\u6BB5\u7684\u503C\u4FEE\u6539\u4E86, \u7EC4\u4EF6\u5C06\u4F1A\u91CD\u65B0\u6E32\u67D3\u3002</p><table><thead><tr><th></th><th style="text-align:center;">state =&gt; stateProps</th><th style="text-align:center;">(state,ownProps) =&gt; stateProps</th></tr></thead><tbody><tr><td>mapStateToProps runs when</td><td style="text-align:center;">store state changes</td><td style="text-align:center;">store state changes or any field of ownProps is different</td></tr><tr><td>component re-renders when</td><td style="text-align:center;">any field of stateProps is different</td><td style="text-align:center;">any field of stateProps is different or any field of ownProps is different</td></tr></tbody></table><p>\u56E0\u4E3AmapStateToProps \u53EF\u4EE5\u63A5\u53D7\u4E24\u4E2A\u53C2\u6570, \u6240\u4EE5\u4F20\u9012\u7684\u53C2\u6570\u4E2A\u6570 \u4E5F\u4F1A\u6709\u4E0D\u540C\u7684\u884C\u4E3A\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// mapStateToProps will not receive ownProps</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(state) </span><span style="color:#88846F;">// state</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ownProps</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(state) </span><span style="color:#88846F;">// state</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ownProps) </span><span style="color:#88846F;">// {}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// it will receive ownProps</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ownProps</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(state) </span><span style="color:#88846F;">// state</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ownProps) </span><span style="color:#88846F;">// ownProps</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// state</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// ownProps</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapStateToProps</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(args[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// state</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(args[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// ownProps</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mapdispatchtoprops" tabindex="-1"><a class="header-anchor" href="#mapdispatchtoprops" aria-hidden="true">#</a> mapDispatchToProps</h2><p>mapDispatchToProps \u662F connect\u51FD\u6570\u7684\u7B2C\u4E8C\u4E2A\u53C2\u6570\u3002</p><ol><li><p>By default, a connected component receives props.dispatch and can dispatch actions itself.</p></li><li><p>connect can accept an argument called mapDispatchToProps, which lets you create functions that dispatch when called, and pass those functions as props to your component.</p></li></ol><p>mapDispatchToProps \u6709\u4E24\u79CD\u5F62\u5F0F\u3002</p><ol><li>\u7B2C\u4E00\u79CD\u662F \u4E00\u4E2A\u51FD\u6570, \u53EF\u4EE5\u63A5\u53D7dispatch \u548C\u4E00\u4E2A\u53EF\u9009\u7684 ownProps</li><li>\u7B2C\u4E8C\u79CD\u65B9\u5F0F\u65F6\u4E00\u4E2A\u5BF9\u8C61\u3002\u4F7F\u7528\u5BF9\u8C61\u7684\u5F62\u5F0F\u66F4\u5BB9\u6613\u4F7F\u7528</li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>We recommend always using the \u201Cobject shorthand\u201D form of mapDispatchToProps, unless you have a specific reason to customize the dispatching behavior.</p></div><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h3><p>\u4E0B\u9762\u662F\u4E00\u4E2A\u6848\u4F8B, \u4E24\u4E2A\u6309\u94AE, \u5206\u522B\u63A5\u53D7\u4E0D\u540C\u7684multiple \u4F5C\u4E3Aprops, \u5E76\u628AmapDispatchToProps \u4F5C\u4E3A\u51FD\u6570\u4F7F\u7528, \u6B64\u65F6\u4F20\u9012\u7B2C\u4E8C\u4E2A\u53C2\u6570 ownProps, \u5E76\u628A\u7EC4\u4EF6\u63A5\u53D7\u7684props \u4F5C\u4E3Apayload \u4F20\u9012\u5230 reducer.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// store.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">double_reducer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { type, payload } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> action</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;">(type) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> DOUBLE_INCREMENT:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> payload</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> DOUBLE_DECREMENT:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> payload;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">triple_reducer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { type, payload } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> action</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;">(type) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> TRIPLE_INCREMENT:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> payload</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> TRIPLE_DECREMENT:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> payload</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createStore</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">combineReducers</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  double: double_reducer,</span></span>
<span class="line"><span style="color:#F8F8F2;">  triple: triple_reducer</span></span>
<span class="line"><span style="color:#F8F8F2;">}))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// App.jsx</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">App</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#66D9EF;font-style:italic;">React.Fragment</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#66D9EF;font-style:italic;">DoubleCounter</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">multiple</span><span style="color:#F92672;">={</span><span style="color:#AE81FF;">2</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#66D9EF;font-style:italic;">TripleCounter</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">multiple</span><span style="color:#F92672;">={</span><span style="color:#AE81FF;">3</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#66D9EF;font-style:italic;">React.Fragment</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Counter\u7684 mapDispatchToProps</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapDoubleDispatch</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">dispatch</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ownProps</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ownProps \u63A5\u53D7\u7684\u662F multiple, \u6B64\u65F6\u4F5C\u4E3A payload\u4F20\u9012\u4E2A reducer.</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({type: DOUBLE_INCREMENT, payload: ownProps.multiple}),</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({type: DOUBLE_DECREMENT, payload: ownProps.multiple})</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapTripleDispatch</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">dispatch</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ownProps</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({type: TRIPLE_INCREMENT, payload: ownProps.multiple}),</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({type: TRIPLE_DECREMENT, payload: ownProps.multiple})</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679CmapDispatchToProps\u662F\u4E00\u4E2A\u51FD\u6570, \u8BE5\u51FD\u6570\u9700\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61, \u5BF9\u8C61\u7684\u6BCF\u4E2A\u5B57\u6BB5\u662F \u4E00\u4E2A\u51FD\u6570(action creator)\u7528\u6765\u66F4\u65B0store\u7684\u72B6\u6001\u3002 \u8FD9\u4E2A\u5BF9\u8C61\u5C06\u4F1A\u548C\u7EC4\u4EF6\u7684props\u5408\u5E76, \u6240\u4EE5\u53EF\u4EE5\u76F4\u63A5\u901A\u8FC7\u7EC4\u4EF6\u7684 props[actionCreator] \u65B9\u5F0F\u8C03\u7528\u3002</p><p>\u5982\u679CmapDispatchToProps \u8FD9\u4E2A\u53C2\u6570\u4F20\u9012\u7ED9\u4E86connect, \u90A3\u4E48\u7EC4\u4EF6\u5C06\u4E0D\u4F1A\u518D\u63A5\u53D7\u9ED8\u8BA4\u7684dispatch.</p><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mapDispatchToProps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  increment,</span></span>
<span class="line"><span style="color:#F8F8F2;">  decrement,</span></span>
<span class="line"><span style="color:#F8F8F2;">  reset,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Each field of the mapDispatchToProps object is assumed to be an action creator</li><li>Your component will no longer receive dispatch as a prop.</li></ol><p>\u5982\u679C\u4F20\u9012\u4E86mapDispatchToProps \u4F46\u662F\u8FD8\u60F3\u5728\u7EC4\u4EF6\u4F7F\u7528dispatch, \u53EF\u4EE5\u4F7F\u7528\u8FD4\u56DE\u51FD\u6570\u7684\u65B9\u5F0F, \u663E\u5F0F\u5730\u5728\u8FD4\u56DE\u7684\u5BF9\u8C61\u91CC \u6DFB\u52A0dispatch.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">mapDispatchToProps</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">dispatch</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">()),</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;">()),</span></span>
<span class="line"><span style="color:#F8F8F2;">    dispatch</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h2><p>React Redux Hooks \u5141\u8BB8\u7EC4\u4EF6\u53BB\u8BA2\u9605store\u7684\u6570\u636E\u66F4\u65B0\u548C\u6D3E\u53D1 actions\u3002</p><h3 id="useselector" tabindex="-1"><a class="header-anchor" href="#useselector" aria-hidden="true">#</a> useSelector</h3><p>The useSelector hooks lets our component extract whatever pieces of data it needs from the Redux store state.</p><ol><li>useSelector \u53EF\u4EE5\u8FD4\u56DE\u4EFB\u610F\u7C7B\u578B\u7684\u503C,\u4E0D\u4EC5\u4EC5\u662F\u4E00\u4E2A\u5BF9\u8C61\u3002\u8FD4\u56DE\u503C\u53EF\u4EE5\u76F4\u63A5\u5728\u7EC4\u4EF6\u4E2D\u4F7F\u7528\u3002</li><li>useSelector \u4E0D\u4F1A\u63A5\u53D7ownProps \u4F5C\u4E3A\u7B2C\u4E8C\u4E2A\u53C2\u6570, \u4F46\u662F\u53EF\u4EE5\u901A\u8FC7\u51FD\u6570\u95ED\u5305 \u8BFB\u53D6\u7EC4\u4EF6\u7684 props.</li><li>\u548Cconnect()\u51FD\u6570\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570mapStateToProps\u4E0D\u540C,useSelector()\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\u7684\u8BDD\u6BCF\u6B21\u90FD\u662F\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684\u5BF9\u8C61,\u4F1A\u89E6\u53D1\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3\u3002</li></ol><p>3.1 \u591A\u6B21\u8C03\u7528useSelector(),\u6BCF\u6B21\u5206\u522B\u8FD4\u56DE\u4E00\u4E2A\u5355\u72EC\u7684\u952E\u503C</p><p>3.2 \u4F7F\u7528\u7C7B\u4F3Creselect \u7B2C\u4E09\u65B9\u5E93, \u53EA\u6709\u8FD4\u56DE\u5BF9\u8C61\u7684\u952E\u503C\u4FEE\u6539\u4E86\u624D\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684\u5BF9\u8C61\u89E6\u53D1\u7EC4\u4EF6\u6E32\u67D3\u3002</p><p>3.3 \u7ED9useSelector\u4F20\u9012\u7B2C\u4E8C\u4E2A\u53C2\u6570 shallowEqual. (from React-Redux)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { shallowEqual, useSelector } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-redux&#39;</span></span>
<span class="line"><span style="color:#88846F;">// later</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> selectedData </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useSelector</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ({value: state.count}), shallowEqual)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// \u7B80\u5355\u7528\u6CD5</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Counter</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useSelector</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// \u4F9D\u8D56\u7EC4\u4EF6\u7684props</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">TodoListItem</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> todo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useSelector</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state.todos[props.id])</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">todo.text</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// \u4F7F\u7528reselect</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> selectCompletedTodos </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createSelector</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state.todos,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;font-style:italic;">todos</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> todos.</span><span style="color:#A6E22E;">filter</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">todo</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> todo.completed).length</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">App</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useSelector</span><span style="color:#F8F8F2;">(selectCompletedTodos)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">length</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u548Cconnect() \u4E0D\u4E00\u6837\u7684\u662F, useSelector() \u5728\u7236\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3\u7684\u65F6\u5019\u4E0D\u4F1A\u963B\u6B62\u5B50\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3, \u5373\u4F7F\u5B50\u7EC4\u4EF6\u7684props\u6CA1\u6709\u6539\u53D8\u3002\u6B64\u65F6\u53EF\u4EE5\u8003\u8651 \u4F7F\u7528React.memo()\u5305\u88F9\u7EC4\u4EF6.</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Counter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> React.</span><span style="color:#A6E22E;">memo</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> counter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useSelector</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state.counter)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">counter</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usedispatch" tabindex="-1"><a class="header-anchor" href="#usedispatch" aria-hidden="true">#</a> useDispatch</h3><p>This hook returns a reference to the dispatch function from the Redux store. You may use it to dispatch actions as needed</p><p>Now we can use the React Redux hooks to let React components interact with the Redux store.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> dispatch </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useDispatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The dispatch function reference will be stable as long as the same store instance is being passed to the Provider. Normally, that store instance never changes in an application.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Todos</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> dispatch </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useDispatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">useEffect</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">fetchTodos</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// Safe to add dispatch to the dependencies array</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, [dispatch])</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;">// store.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> INCREMENT </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;counter/increment&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> DECREMENT </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;counter/decrement&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">reducer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">action</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { type } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> action</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;">(type) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> INCREMENT:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> DECREMENT:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;">: </span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> state</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> store </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createStore</span><span style="color:#F8F8F2;">(reducer, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// App.jsx</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { useSelector, useDispatch, Provider } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-redux&#39;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { createRoot } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-dom/client&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Counter</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useSelector</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> state)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> dispatch </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useDispatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handleIncrement</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      type: INCREMENT</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handleDecrement</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      type: DECREMENT</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">className</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;primary-button&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">handleIncrement</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Increment&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">span</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">count</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">className</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;primary-button&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">handleDecrement</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;Decrement&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createRoot</span><span style="color:#F8F8F2;">(document.</span><span style="color:#A6E22E;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;root&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">root.</span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">store</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">store</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#66D9EF;font-style:italic;">Counter</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#66D9EF;font-style:italic;">Provider</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Button </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">memo</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">props</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;render&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">props.increment</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&gt;increment&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">App</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> dispatch </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useDispatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> increment </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useCallback</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">dispatch</span><span style="color:#F8F8F2;">({type: </span><span style="color:#E6DB74;">&#39;increment&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, [dispatch])</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#66D9EF;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increment</span><span style="color:#F92672;">={</span><span style="color:#F8F8F2;">increment</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// \u4E0A\u8FF0demo \u5728\u7236\u7EC4\u4EF6\u66F4\u65B0\u7684\u65F6\u5019 \u4E0D\u4F1A\u89E6\u53D1\u5B50\u7EC4\u4EF6\u7684\u66F4\u65B0\u3002</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usestore" tabindex="-1"><a class="header-anchor" href="#usestore" aria-hidden="true">#</a> useStore</h3><p>This Hook returns a reference to the same Redux store that was passed in to the Provider component.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { useStore } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;react-redux&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">CounterComponent</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ({ </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;"> }) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> store </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useStore</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// EXAMPLE ONLY! Do not do this in a real app.</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// The component will not automatically update if the store state changes</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#F92672;">{</span><span style="color:#F8F8F2;">store.</span><span style="color:#A6E22E;">getState</span><span style="color:#F8F8F2;">()</span><span style="color:#F92672;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),o=[p];function t(c,F){return n(),a("div",null,o)}var i=s(e,[["render",t],["__file","react-redux.html.vue"]]);export{i as default};
